---
title: Status List
weight: 2
last_reviewed_on: 2025-05-19
review_in: 6 months
---


# Status List
The status list endpoint gives GOV.UK Wallet holders and verifiers access to shards of the credential status list. Each shard holds part of the issued credentials across the entire Status List. 

Each status may contain one of the following values:

* `0x00` (VALID). Represents a valid credential
* `0x01` (INVALID). Represents a credential that has been revoked (marked as invalid)
* `0x10` (NOT USED). Currently not used.
* `0x11` (NOT USED). Currently not used.

## Technical details

### Endpoint URI
The URI path for the statuslist endpoint is `/{type}/{endpoint}`.

Where:

* `type` represents the type of status list for this shard (`bitstring` or `token status`)
* `endpoint` represents the hashed ID of this shard

The statuslist endpoint is open to any GOV.UK Wallet holder or verifier.

### Request format
The statuslist endpoint must accept HTTP GET requests.

The request must include:

* `request body (JSON)`: contains a JSON object including `idx`(the subject credentials index) and `uri` ( the uri of the list that the credential belongs to)


### Request Example

#### Header

The JSON object present in the `/{type}/{endpoint}` HTTP request:

```JSON
{
  "vct": "https://credentials.example.com/identity_credential",
  …
  …  
  "status": {
     "status_list": {
       "idx": 3,
       "uri": "https://api.status-list.service.gov.uk/statuslists/A671FED3E9AD"
     }
  }
}

```
* `vct` must be "JWT" - this is the media type of the complete JWT
* `status.status_list.idx` (index). REQUIRED. The index at which the credential is stored in the status list found on the uri
* `status.status_list.uri` (status list). REQUIRED. The uri to the status list endpoint in which the credential is located

#### Payload

The JWT payload must contain the following parameters:

```JSON
{
  "iss": "https://issuer.domain.com",
  "expires": "1734709493"
}
```
* `iss` (issuer). REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential
* `expires` (expiration time). REQUIRED. The expiry date for the credential - after this date the credential will expire

This is an example of the GET:

```TEXT
GET /b/A671FED3E9AD HTTP/1.1
Host: api.status-list.service.gov.uk
Accept: application/statuslist+jwt

HTTP/1.1 200 OK
Content-Type: application/statuslist+jwt
eyJhbGciOiJIUzI1NiIsImtpZCI6IjEyIiwidHlwIjoic3RhdHVzbGlzdCtqd3QifQ.eyJleHAiOjIyOTE3MjAxNzAsImlhdCI6MTY4NjkyMDE3MCwiaXNzIjoiaHR0cHM6Ly9hcGkuc3RhdHVzLWxpc3Quc2VydmljZS5nb3YudWsiLCJzdGF0dXNfbGlzdCI6eyJiaXRzIjoyLCJsc3QiOiJlTnB6ZEFFQUFNZ0FoZyJ9LCJzdWIiOiJodHRwczovL2FwaS5zdGF0dXMtbGlzdC5zZXJ2aWNlLmdvdi51ay9zdGF0dXNsaXN0cy8xIiwidHRsIjo0MzIwMH0.8bS1wn1TuHaN-RjDEyaf8cDLHH8m6IxgJT0qiLnxvqI
```
# JWT Response Header

Where the JWT response header will contain the following:

```JSON
{
  "alg": "HS256",
  "kid": "12",
  "typ": "statuslist+jwt"
}
```

* `alg` (algorithm). Will be "HS256" - this is the algorithm used to encode the JWT
* `kid` (key ID). REQUIRED. This key ID must match the key ID used when registering as a credential issuer for the status list. This is used as part of the verification process
* `type` (status list type). The type of the status list (token status list or bitstring status list)

#### Payload

The JWT response payload will contain the following:

```JSON
{
  "exp": 2291720170,
  "iat": 1686920170,
  "iss": "https://api.status-list.service.gov.uk",
  "status_list": {
    "bits": 2,
    "lst": "eNpzdAEAAMgAhg"
  },
  "sub": "https://api.status-list.service.gov.uk/b/A671FED3E9AD",
  "ttl": 43200
}
```

* `exp` (expiry). The expiry of the subject credential
* `iat` (issued at). The timestamp the subject credential was originally issued at
* `iss` (issuer). The URL of the credential issuer service operated by the organisation sharing the credential
* `status_list.bits` (bits). The number of bits that represent a status
* `status_list.lst` (list). An encoded version of this shard of the status list
* `sub` (algorithm). The URI of the shard present in the original HTTP request
* `ttl` (time-to-live). The lifetime of the cached version of this shard. Shards are updated at regular and set intervals