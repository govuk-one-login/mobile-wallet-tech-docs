---
title: Issue Status List Entry
weight: 10
last_reviewed_on: 2025-05-19
review_in: 6 months
---


# Issue Status List Entry
The issue status list entry endpoint is used for issuing new credentials into the status list.

Once an issuer has requested to issue a new credential this request will get validated, if successful a new credential will be issued on the status list and an index and uri to where this this credentials status is stored will be returned.

All new issuers will need to be registered and send the request as a signed JWT.

### Technical details

#### Endpoint URI
The issuing endpoints URI path is ``/issue``.

The credential issuer must be registered, and access will be given to the internal API. The issuer must also sign the request with its private key and share public keys on its ``/.well-known/jwks.json`` so that can be used to verify the jwt.

#### Request format
The issue endpoint must accept HTTP POST requests.

The request must include:

* the header: Authorization header which includes a kid, alg and type (JWT) which is signed and encoded

* the request body (JSON): contains a signed jwt containing a expiry date under "expires" for the how long the credential status will be allocated for, and the credential issuer uri under “iss”


### Request Example

#### Header

The JWT header must contain the following parameters:

```JSON
{
  "typ": "JWT",
  "alg": "ES256",
  "kid": "1fb2c0f07f643b45cafeb53fb9d9eb34"
}
```
* `typ` must be "JWT" - this is the media type of the complete JWT
* `alg` (algorithm). REQUIRED. must be "ES256" - this is the algorithm used to sign the JWT
* `kid` (key ID). REQUIRED. This key ID must match the key ID used when registering as a credential issuer for the status list. This is used as part of the verification process.

#### Payload

The JWT payload must contain the following parameters:

```JSON
{
  "iss": "https://issuer.domain.com",
  "expires": "1734709493"
}
```

* `iss` (issuer). REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential
* `expires` (expiration time). REQUIRED. The expiry date for the credential i.e how long the credential should be allocated for and after that time is up the credential will expire

And below is a example of the post request signed and encrypted as a jwt

```
POST /issue HTTP/1.1
Host: api.status-list.service.gov.uk
Accept: application/json
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjFmYjJjMGYwN2Y2NDNiNDVjYWZlYjUzZmI5ZDllYjM0In0.eyJpc3MiOiJodHRwczovL2lzc3Vlci5kb21haW4uY29tIiwiZXhwaXJlcyI6IjE3MzQ3MDk0OTM4NTIifQ.rLdMvfxoVUhfEmJsRfJw1Nfzy0Kq88CG4IhpFKpeo8rJ_1zDzAp4-812herMHaWxoT4r-3v0l7t1RdM96h9GIg
```

### Example Response

```
HTTP/1.1 200 OK
Content-Type: application/json
{
  "idx": 3,
  "uri": "https://api.status-list.service.gov.uk/b/A671FED3E9AD"
}
```

* `idx` (index). The index at which the credential will be stored in the status list found on the uri
* `uri` (status list). The uri to the status list endpoint in which the new credential has been stored


