---
title: Issuing credentials
weight: 70
last_reviewed_on: 2024-07-02
review_in: 2 month
---

# Issuing credentials

Once you have completed Steps 1 to 7 in the **[Setting up your service](/set-up-your-service.html)** and implemented the **[Wallet Credential Issuer APIs](/API-reference.html)**, you are ready to issue credentials to GOV.UK Wallet.

This page will guide you to the key steps your credential issuer must follow to issue a new credential. You can see a diagram with the steps on the **[wallet technical flow diagram](/issuance-flow.html#the-wallet-technical-flow)**.

## Step 1: Your user logs in with One Login

Your service must be migrated to One Login and credentials can only be offered to authenticated users. The user is simultaneously logged in your service and the wallet to ensure only the right credential is going to the right wallet.

A `walletSubjectID` is included with the personal information of the user you obtain when they log in. This `walletSubjectID` is a pairwise identifier that will be used to prove the user logged in your service and in the wallet are the same. It is later referred to as 'rightful holder check'.


## Step 2: Your service builds a credential offer

`GET /credential_offer` (see [Wallet Credential Issuer API](/API-reference.html#credential_offer))

The wallet needs a credential offer produced by your service to get a credential. This means your service must:

1. instruct your credential issuer to generate a URL that contains a credential offer.<br>
2. render this URL as a QR or deep link on the web page of your service so the wallet can consume it.<br>

For this your credential issuer passes the credential offer **by value** using the `credential_offer` parameter. The URL starts with a set prefix followed by the query parameter `credential_offer` which contains the encoded credential offer as follows:

```
https://mobile.account.gov.uk/wallet/add?credential_offer=${CREDENTIAL_OFFER}
```

### Example URL containing a credential offer:

```
https://mobile.account.gov.uk/wallet/add?credential_offer=%7B%22credentials%22%3A%5B%22BasicDisclosure%22%5D%2C%22grants%22%3A%7B%22urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Apre-authorized_code%22%3A%7B%22pre-authorized_code%22%3A%22eyJraWQiOiJmZjI3NWI5Mi0wZGVmLTRkZmMtYjBmNi04N2M5NmIyNmM2YzciLCJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJ1cm46ZmRjOmdvdjp1azp3YWxsZXQiLCJjbGllbnRJZCI6ImFiYzEyMyIsImlzcyI6InVybjpmZGM6Z292OnVrOjxITVJDPiIsImNyZWRlbnRpYWxfaWRlbnRpZmllcnMiOlsiM2U0Zjc1ZDMtNzkxMy00ZDE0LWE0YjctY2FlNzFlN2NiYmEwIl0sImV4cCI6MTcxMTAzNTkwNywiaWF0IjoxNzExMDM1NjA3fQ.6hHe0-A3n4GlBph9X4hcxbsflusco2Q7z_07-s85QmYOSCbYm8My_LGEcBD68E5lW5DCJ1yjwtPPr9VbhIlhyg%22%7D%7D%2C%22credential_issuer%22%3A%22https%3A%2F%2Fcredential-issuer.example.com%22%7D
```

### Example of a credential offer object:

```JSON
{
    "credentials": [
        "BasicDisclosure"
    ],
    "grants": {
        "urn:ietf:params:oauth:grant-type:pre-authorized_code": {
            "pre-authorized_code": "eyJraWQiOiJmZjI3NWI5Mi0wZGVmLTRkZmMtYjBmNi04N2M5NmIyNmM2YzciLCJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJ1cm46ZmRjOmdvdjp1azp3YWxsZXQiLCJjbGllbnRJZCI6ImFiYzEyMyIsImlzcyI6InVybjpmZGM6Z292OnVrOjxITVJDPiIsImNyZWRlbnRpYWxfaWRlbnRpZmllcnMiOlsiM2U0Zjc1ZDMtNzkxMy00ZDE0LWE0YjctY2FlNzFlN2NiYmEwIl0sImV4cCI6MTcxMTAzNTkwNywiaWF0IjoxNzExMDM1NjA3fQ.6hHe0-A3n4GlBph9X4hcxbsflusco2Q7z_07-s85QmYOSCbYm8My_LGEcBD68E5lW5DCJ1yjwtPPr9VbhIlhyg"
        }
    },
    "credential_issuer": "https://credential-issuer.example.com"
}
```
For an omnichannel experience, the web page of your service must then display this credential offer as a QR code (if the user is on a non-mobile browser) or as CTA with a deep link (on the same device).

### Step 2a. Generate a credential offer

The credential offer is a JSON object containing the following parameters:

| Parameter                                                                       | Description                                                                                                                                                            |
|---------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| credential_issuer                                                               | the URL of the credential issuer                                                                                                                                       |
| `credentials`                                                                     | an array of strings, where each item is a type of credential that can be obtained from the credential issuer                                                           |
| `grants`                                                                          | a JSON object containing the grant types the credential issuer's authorization server accepts for this credential offer                                                |
| `grants.urn:ietf:params:oauth:grant-type:pre-authorized_code`                     | the grant type required for the [OpenID for Verifiable Credential Issuance](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html) **Pre-Authorized Code Flow**                                                                   |
| `grants.urn:ietf:params:oauth:grant-type:pre-authorized_code.pre-authorized_code` | the pre-authorized code generated and signed by the credential issuer and which gives the wallet authorization to obtain an access token from the authorization server |

<%= warning_text('GOV.UK Wallet only supports the pre-authorised code currently.') %>

#### Example pre-authorised code JWT structure

###### Header:

```JSON
{
  "typ": "JWT",
  "alg": "ES256",
  "kid": "11111111-1111-1111-1111-111111111111"
}
```

###### Body:

```JSON
{
  "clientId": <clientId>, /* obtained when you onboarded to One Login */
  "credential_identifiers": [
    <credential_identifier> /* Note the spec supports multiple identifiers in a list, but GOV.UK Wallet deliberately only supports one identifier/credential per code */
  ],
  "exp": 1234567890,
  "iat": 1234567890,
  "iss": "https://issuer.[your-service].gov.uk/wallet/",  /* URI of your Issuer's domain */
  "aud": "https://token.account.gov.uk/"  /* URI of One Login's token service */
}
```

**Additional requirements:**

* `kid` matches a kid of a key in the issuer's keyring retrieved from your JWKS endpoint

* `alg` must be ES256

* `nbf` <= now() < exp

* `aud` is the URI of One Login's token service

* `iss` is the URI of your credential issuer, e.g. https://issuer.[your-service].gov.uk/wallet/

* `exp` is the expiry of the pre-authorised code. We recommend using **15min** for this expiry, allowing the user to complete credential issuance within that timeframe without having to start again.

### Step 2b. Prepare for credential issuance

Your service must now cache the credential to be sent at the end of the exchange. For this you may which to use an existing identifier used to match the record that will be issued as a signed credential at the end of the exchange.

The reference implementation of the credential issuer uses DynamoDB as an issuance cache to keep track of the credential to be issued at the end, when the flow is successful.



## Step 3: The Wallet consumes your credential offer

For this, the wallet will either scan the QR Code you displayed on the web page of your service (different device) or open a link from the mobile browser (same device).

Example of link that must be displayed by your service as a button (same device) or as a QR code (different device):

```
https://mobile.build.account.gov.uk/wallet-test/add?credential_offer=%7B%22credentials%22%3A%5B%22SocialSecurityCredential%22%5D%2C%22grants%22%3A%7B%22urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Apre-authorized_code%22%3A%7B%22pre-authorized_code%22%3A%22eyJraWQiOiI1ZGNiZWU4NjNiNWQ3Y2MzMGM5YmExZjczOTNkYWNjNmMxNjYxMDc4MmU0YjZhMTkxZjk0YTdlOGIxZTE1MTBmIiwidHlwIjoiSldUIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJodHRwczovL3N0dWItY3JlZGVudGlhbC1pc3N1ZXIubW9iaWxlLmJ1aWxkLmFjY291bnQuZ292LnVrIiwiY2xpZW50SWQiOiJURVNUX0NMSUVOVF9JRCIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS1jcmVkZW50aWFsLWlzc3Vlci5tb2JpbGUuYnVpbGQuYWNjb3VudC5nb3YudWsiLCJjcmVkZW50aWFsX2lkZW50aWZpZXJzIjpbImVhMjM3Mjk4LWU3MDEtNDE3Zi1iZDZjLTliNGZlYjhlN2RhZiJdLCJleHAiOjE3MjQzNDQ3NTEsImlhdCI6MTcyNDM0NDQ1MX0.AJrh4XG7unGbUhFqgg_kEpi7vqODWzCrcIrwQiF5wbKEtlsYA2kgQiDlMP06YNzkWR2bD2Zkwn24QeYwEu0Vqw%22%7D%7D%2C%22credential_issuer%22%3A%22https%3A%2F%2Fexample-credential-issuer.mobile.build.account.gov.uk%22%2C%22credential_issuer%22%3A%22https%3A%2F%2Fexample-credential-issuer.mobile.build.account.gov.uk%22%7D
```

## Step 4: Your service sends the credential to wallet

`POST /credential` (see [Wallet Credential Issuer API](/API-reference.html#credential))

### Step 4a. Validate the access token with One Login

The wallet shares with your service an access token created by the One Login token service.

Your service must check that the access token is indeed originated from One Login.

For this your service must fetch the public signing key (JWKS) from the One Login token service at the `/.well-known/jwks.json` endpoint and check that the access token is valid.


### Step 4b. Validate credential request, which includes:

This step includes the following steps to determine that the user requesting the credential is the same one using your service and that the credential issued is cryptographically bound to the wallet. This can be broken down in the following sub-steps:

#### Get the unique wallet identifier (did:key proof of possession challenge)

Each wallet instance must be uniquely identified so your service can bind a credential with this wallet instance. For this GOV.UK Wallet uses a [W3C Decentralised Identifier (DID)](https://www.w3.org/TR/did-core/).

GOV.UK Wallet uses a specific type of DID called `did:key` to cryptographically bind credentials to a wallet instance.

A [did:key](https://w3c-ccg.github.io/did-method-key/) is a DID (Decentralized Identifier) method. The DID represents the public key of an asymmetric key pair generated when the GOV.UK Wallet is installed on a device. The private key never leaves the device, whereas the did:key is shared with credential issuers and verifiers, allowing credentials to be cryptographically bound to a specific GOV.UK Wallet instance.

When requesting a credential from an issuer, the wallet includes a **cryptographic proof** in the request. This proof is random and unique value (provided by One Login) that has been signed into a token (JWT) with the wallet's private key. The `did:key` (i.e. the wallet's public key) is included in the proof JWT's header claim `kid`.

The issuer, upon receiving the credential request, verifies the proof signature with the `did:key`. A successful verification demonstrates the wallet's ownership of the private asymmetric pair to that public `did:key`. The issuer then creates the verifiable credential (VC) and cryptographically binds it to the wallet by writing the `did:key` as the verifiable credential's subject (the `sub` claim within the VC payload).

Example verifiable credential payload with the `did:key` as the `sub` claim:

```
{
  "sub": "did:key:zDnaewZMz7MN6xSaAFADkDZJzMLbGSV25uKHAeXaxnPCwZomX",
  "nbf": 1717762828,
  "iss": "urn:fdc:gov:uk:example-credential-issuer",
  "context": [
    "https://www.w3.org/2018/credentials/v1"
  ],
  "exp": 1749298828,
  "iat": 1717762828,
  "vc": {
    "type": [
      "VerifiableCredential",
      "SocialSecurityCredential"
    ],
    "credentialSubject": {
      "name": [
        {
          "nameParts": [
            {
              "value": "Mr",
              "type": "Title"
            },
            {
              "value": "Sarah",
              "type": "GivenName"
            },
            {
              "value": "Edwards",
              "type": "FamilyName"
            }
          ]
        }
      ],
      "socialSecurityRecord": [
        {
          "personalNumber": "QQ123456C"
        }
      ]
    }
  }
}
```

For more information about how did:key are created, please refer to [For more details about credential binding](/issuing-credentials.html#for-more-details-about-credential-binding)

#### Fetch underlying data for the credential

Refer to your issuance cache (see Step 2b.) to find the credential identifier and retrieve the underlying data that will go in the credential from your database.

For example retrieve all the fields required in the NINO credential (name, national insurance number) associated with a given Personal Tax Account and individual.

#### Complete rightful holder check

This step will ensure that the same user is logged in simultaneously in your service and the wallet. For this you must compare the pairwise identifier `walletSubjectId` you received when your user logged with One Login (Step 1) to the `walletSubjectId` in the access token you received from the wallet (Step 4a).

<%= warning_text('If the pairwise identifiers do not match, it means the wallet trying to acquire the credential does not belong to the person who is logged in your service.') %>

In this scenario, **your credential issuer should stop the issuance flow** and if needed keep a record of the attempt for audit and fraud prevention purpose. Additional fraud detection mechanisms will be added at a future stage.

#### Build the credential as a VC-JWT

Credentials are following the W3C Verifiable Credential Data Model and the JWT proof format. The definition of the content of your credential, must follow the One Login conventions [see Step 6. in Setting up your service](/set-up-your-service.html#step-6-define-the-content-of-your-credential)

#### Sign the credential with your private key

Finally, use your private signing key to sign the JWT and return to the wallet.

## For more details about credential binding

### Binding credentials to users

GOV.UK Wallet uses a `did:key` to cryptographically bind credentials to the user's wallet.

A [did:key](https://w3c-ccg.github.io/did-method-key/) is a DID (Decentralized Identifier) method. The DID represents the public key of an asymmetric key pair generated when the GOV.UK Wallet is installed on a device. The private key never leaves the device, whereas the did:key is shared with credential issuers and verifiers, allowing credentials to be cryptographically bound to a specific GOV.UK Wallet instance.

The GOV.UK Wallet creates a did:key from a **P-256** (also known as Secp256r1) elliptic curve public key.

### The did:key format

The did:key method is used to transfer public keys.

The format of a did:key is `did:key:multibaseValue`. The `multibaseValue` is the base58-btc multibase string representation of concatenating the multicodec identifier for the public key type and the compressed public key.

````
did-key-format := did:key:MULTIBASE(base58-btc, MULTICODEC(public-key-type, raw-public-key-bytes))
````

In Elliptic Curve Cryptography (ECC), the public key is a pair of `x` and `y` coordinates. A compressed public key is the `x` coordinate, which is 32 bytes in length, with a prefix, of 1 byte in length, that indicates whether the `y` coordinate is even or odd. The prefix is `02` if the `y` coordinate is even and `03` if it is odd. The resulting compressed public key is **33 bytes** in length:

````
Public key: 52972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab288742f4dc97d9edb6fd946babc002fdfb06f26caf117b9405ed79275763fdb1c

Public key (x coordinate): 52972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2
Public key (y coordinate): 88742f4dc97d9edb6fd946babc002fdfb06f26caf117b9405ed79275763fdb1c

// y coordinate is even so "02" is prepended to the x coordinate
Public key (compressed): 0252972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2
````

The `multibaseValue` is generated as follows:

1. Encode the compressed public key as bytes
1. Prefix the key bytes with the **curve multicodec value** encoded as **unsigned varint** (variable length integers)
 - the multicodec hexadecimal value of a P-256 elliptic curve public key is `0x1200`, in varint-encoded bytes that is `[0x80, 0x24]`
1. Encode the above with **base58-btc** and then prefix it with `"z"` to indicate the base58-btc encoding - the result is the `multibaseValue`


The following is an example of a did:key derived from a base-58 encoded P-256 public key:

````
did:key:zDnaewZMz7MN6xSaAFADkDZJzMLbGSV25uKHAeXaxnPCwZomX
````

All DIDs derived from a P-256 public key always start with `"zDn"`.

#### Verifying a credential
To share a verifiable credential with a verifier, the wallet creates a **verifiable presentation** containing the verifiable credential, and signs it with its private key.

The verifier must be able to confirm that the system presenting the credential (i.e. the wallet) is also the intended holder of that credential. The verifier must confirm **proof of possession** of the verifiable credential. This is done by verifying that the entity which signed the verifiable presentation is the same as the subject of the verifiable credential. In other words, the did:key in the verifiable credential must be able to verify the signature on the verifiable presentation.
