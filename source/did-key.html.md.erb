---
title: The did:key Method
weight: 70
last_reviewed_on: 2024-06-07
review_in: 1 month
---

# The did:key Method

A did:key is a DID (Decentralized Identifier) method. The DID represents the public key of an asymmetric key pair which is generated when the GOV.UK Wallet is installed on a device. The private key never leaves the device, whereas the did:key is shared with credential issuers and verifiers, allowing credentials to be cryptographically bound to a specific GOV.UK Wallet instance.

The GOV.UK Wallet creates a did:key from a Secp256r1 (also known as "P-256") elliptic curve public key.

## did:key Format

The did:key method is used to transfer public keys.

The format of a did:key is `did:key:multibaseValue`. The `multibaseValue` is the base58-btc multibase string representation of the concatenation of the multicodec identifier for the public key type and the compressed public key.

````
did-key-format := did:key:MULTIBASE(base58-btc, MULTICODEC(public-key-type, raw-public-key-bytes))
````

It is generated as follows:

1. Encode the compressed public key as bytes
 - The public key is a pair of x and y coordinates. A compressed public key is the 'x' coordinate (32 bytes in length) with a prefix (1 byte in length) that indicates whether the 'y' coordinate is even or odd. The prefix is '02' if the y coordinate is even and '03' if it is odd. The resulting compressed public key is 33 bytes in length.
1. Prefix the key bytes with the curve multicodec value, as varint-encoded bytes
 - For a P-256 public key, the multicodec value is 0x1200 (in varint-encoded bytes that is [0x80, 0x24])
1. Encode the above with base58-btc and prefix it with "z" to indicate the base58-btc encoding - the result is the `multibaseValue`


The following is an example of a did:key derived from a base-58 encoded Secp256r1 public key:

````
did:key:zDnaewZMz7MN6xSaAFADkDZJzMLbGSV25uKHAeXaxnPCwZomX
````

All DIDs derived from a Secp256r1 public key always start with 'zDn'.


## How GOV.UK Wallet uses did:key

GOV.UK Wallet uses a did:key to cryptographically bind credentials to a wallet instance.

### Issuing a credential
To request a credential, the wallet app signs into a token a random value (provided by One Login) with its private key. The token contains the did:key. The token is sent to the issuer when requesting a credential. The issuer verifies the signature of the token using the did:key contained in it.

### Verifying a credential
