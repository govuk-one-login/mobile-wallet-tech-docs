---
title: Understanding GOV.UK Wallet’s credential exchange flow
weight: 40
last_reviewed_on: 2024-07-02
review_in: 2 month
---

# Understanding GOV.UK Wallet’s credential exchange flow

## The wallet logical flow

<img src="/images/wallet-cri-logical-flow.png" width="100" height="200">

1. Your user logs in your service with One Login Identity Provider

2. The same user is also logged in the GOV.UK Wallet app

3. Your service shows a credential offer as a QR code or a deep link as a CTA (if on same device) including a pre-authorized code the GOV.UK Wallet can use to later request the credential

4. The GOV.UK Wallet exchanges the pre-authorized code with the One Login Token Service and retrieves a JWT access token signed by the One Login Token Service

5. GOV.UK Wallet sends the access token to your service to fetch the credential

6. Your service validates the access token, ensures it is signed by the One Login Token Service and confirms the token is bound to the same user as logged into your credential issuer.

7. Your service sends the credential so GOV.UK Wallet can validate it and store it


## The wallet technical flow

GOV.UK Wallet helps users store and share digital versions of their government credentials, such as documents, letters, cards and emails in one place that they can trust. Government organisations who already let their users log in to services with GOV.UK One Login can also offer digital verifiable credentials (VCs) users can store in their own wallet.

This diagram shows a simple example of the exchange of a credential between a government service and the GOV.UK Wallet. A user who is logged in the government service with the One Login service starts the exchange through the mobile app. The flow is an exchange of a credential represented as a JSON Web Token (JWT), as well as its metadata, using OAuth protected endpoints.

<img src="/images/wallet-cri-technical-flow.png" width="100" height="200">

<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
</script>

<html lang="en">
  <body>
    <pre class="mermaid">
  sequenceDiagram
    autonumber
    actor User as User
    participant CRI as Credential Issuer
    participant App as App
    participant OneLogin as OneLogin
    activate User
    User->>CRI: Access
    activate CRI
    CRI->>OneLogin: Authenticates user:<br> GET /authorize
    activate OneLogin
    OneLogin-->>CRI: Redirects user to CRI's redirect URI<br> with Authorization Code
    deactivate OneLogin
    CRI->>OneLogin: Exchanges Authorization Code for tokens:<br> POST /token
    activate OneLogin
    OneLogin-->>CRI: Returns tokens (Access Token, ID Token, etc.)
    deactivate OneLogin
    CRI->>OneLogin: Exchanges Access Token for User Information:<br>POST /userinfo
    activate OneLogin
    OneLogin-->>CRI: Returns User Information
    deactivate OneLogin
    CRI->>CRI: Extracts wallet_subject_id from<br> User Information
    CRI->>CRI: Generates credential_identifier (UUID)
    CRI->>CRI: Caches wallet_subject_id against<br> credential_identifier
    CRI->>CRI: Builds Pre-Authorized Code (JWT)
    note over CRI: { "aud": "https://one-login.gov.uk",<br> "clientId": "TEST_CLIENT_ID",<br> "iss": "https://cri.gov.uk",<br> "credential_identifiers": ["3ffbb01f-43d2-4da6-94d7-c40b73bb19ce"],<br> "exp": 1741012365, <br>"iat": 1741012065 }
    CRI->>CRI: Signs Pre-Authorized Code with<br> CRI's private key
    CRI->>CRI: Builds Credential Offer object
    CRI-->>User: Presents Credential Offer URI<br> as QR code or deep-link
    User->>App: Opens app
    activate App
    App-->OneLogin: Authenticates user
    activate OneLogin
    OneLogin-->>App: User is authenticated
    deactivate OneLogin
    User->>App: Scans QR code or opens deep-link
    App->>App: Validates Credential Offer
    App->>App: Extracts CRI's URL from<br> Credential Offer
    App->>CRI: Fetches CRI's Metadata:<br> GET /.well-known/openid-credential-issuer
    activate CRI
    CRI-->>App: Returns CRI's Metadata
    deactivate CRI
    App->>App: Extracts Authorization Server's<br> URL from Metadata
    App->>OneLogin: Exchanges Pre-Authorized Code for<br> Access Token
    activate OneLogin
    OneLogin->>OneLogin: Uses clientId in  Pre-Authorized<br> Code to find CRI's JWKS URL
    OneLogin->>CRI: Fetches CRI's public keys:<br> GET /.well-known/jwks.json
    activate CRI
    CRI-->>OneLogin: Returns JSON Web Key Set
    deactivate CRI
    OneLogin->>OneLogin: Verifies Pre-Authorized Code<br> content and signature
    OneLogin-->>App: Issues Access Token
    deactivate OneLogin
    App->>App: Generates did:key from app's public key
    App->>App: Builds Proof (JWT) by signing Access Token<br> c_nonce with app's private key
    note over App: kid header property holds did:key
    App->>CRI: Fetches Credential:<br> POST /credential
    Note over App,CRI: Authorization header: Access Token<br>Request body: Proof
    activate CRI
    CRI->>CRI: Validates Access Token header<br> and payload claims
    opt if public key not in cache or invalid
        CRI->>OneLogin: Fetches One Login's public keys:<br> GET /.well-known/jwks.json
        activate OneLogin
        OneLogin-->>CRI: Returns JSON Web Key Set
        deactivate OneLogin
    end
    CRI->>CRI: Verifies Access Token signature
    CRI->>CRI: Validates Proof header and payload claims
    CRI->>CRI: Extracts did:key<br> from Proof header
    CRI->>CRI: Verifies Proof signature with did:key
    CRI->>CRI: Checks Access Token c_nonce claim<br> and Proof nonce claim match
    CRI->>CRI: Extracts credential_identifiers claim<br> and looks up cached credential
    CRI->>CRI: Checks Access Token sub claim (wallet_subject_id)<br> and cached wallet_subject_id match
    CRI->>CRI: Builds Credential
    note over CRI: sub claim holds did:key
    CRI->>CRI: Signs Credential with CRI's private key
    CRI-->>App: Returns Credential
    deactivate CRI
    App->>CRI: Fetches CRI's public key:<br> GET /.well-known/did.json
    activate CRI
    CRI-->>App: Returns public key as DID document
    deactivate CRI
    App->>App: Verifies signature and content<br> of Credential
    App->>App: Securely stores Credential
    App-->>CRI: Notifies of success or failure:<br>POST /notification
    activate CRI
    CRI-->>CRI: Records notification
    CRI-->>App: Returns empty response
    deactivate CRI
    deactivate App
    deactivate User
    </pre>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
    </script>
  </body>
</html>


1. Your user logs in with One Login<br>

2. Your service builds a credential offer (GET /credential_offer call)<br>
    2a. The credential offer contains a pre-authorised code signed by your service (see Step 2. Set up JWKS) and displays it as a QR code or button with a link if on a mobile device<br>
    2b. Your service caches the credential to be sent at the end of the exchange<br>

3. The Wallet consumes your credential offer (using a QR Code or a link)

4. Return the credential to the wallet (POST /credential call)<br>
    4a. Validate the access token with One Login<br>
    4b. Validate credential request, which includes:<br>
        - Extract the pairwise wallet identifier walletSubjectId from the access token<br>
        - Compare this pairwise wallet identifier with the other walletSubjectId you received after logging the user in with One Login<br>
        - Complete the proof of possession challenge from the wallet and extract its did:key<br>
        - Fetch underlying data linked to your unique credential identifier (created in step 2b.)<br>
        - Build the credential as a VC-JWT including its did:key to bind the credential to the wallet<br>
        - Sign the credential with your private key<br>
    4c. Return VC-JWT to the wallet
