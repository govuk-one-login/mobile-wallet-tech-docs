---
title: Understanding GOV.UK Wallet’s credential exchange flow
weight: 40
last_reviewed_on: 2024-07-02
review_in: 2 month
---

# Understanding GOV.UK Wallet’s credential exchange flow

## The wallet logical flow

<img src="/images/wallet-cri-logical-flow.png" width="100" height="200">

1. Your user logs in your service with One Login Identity Provider

2. The same user is also logged in the GOV.UK Wallet app

3. Your service shows a credential offer as a QR code or a deep link as a CTA (if on same device) including a pre-authorized code the GOV.UK Wallet can use to later request the credential

4. The GOV.UK Wallet exchanges the pre-authorized code with the One Login Token Service and retrieves a JWT access token signed by the One Login Token Service

5. GOV.UK Wallet sends the access token to your service to fetch the credential

6. Your service validates the access token, ensures it is signed by the One Login Token Service and confirms the token is bound to the same user as logged into your credential issuer.

7. Your service sends the credential so GOV.UK Wallet can validate it and store it


## The wallet technical flow

GOV.UK Wallet helps users store and share digital versions of their government credentials, such as documents, letters, cards and emails in one place that they can trust. Government organisations who already let their users log in to services with GOV.UK One Login can also offer digital verifiable credentials (VCs) users can store in their own wallet.

This diagram shows a simple example of the exchange of a credential between a government service and the GOV.UK Wallet. A user who is logged in the government service with the One Login service starts the exchange through the mobile app. The flow is an exchange of a credential represented as a JSON Web Token (JWT), as well as its metadata, using OAuth protected endpoints.

<img src="/images/wallet-cri-technical-flow.png" width="100" height="200">

1. Your user logs in with One Login<br>

2. Your service builds a credential offer (GET /credential_offer call)<br>
    2a. The credential offer contains a pre-authorised code signed by your service (see Step 2. Set up JWKS) and displays it as a QR code or button with a link if on a mobile device<br>
    2b. Your service caches the credential to be sent at the end of the exchange<br>

3. The Wallet consumes your credential offer (using a QR Code or a link)

4. Return the credential to the wallet (POST /credential call)<br>
    4a. Validate the access token with One Login<br>
    4b. Validate credential request, which includes:<br>
        - Extract the pairwise wallet identifier walletSubjectId from the access token<br>
        - Compare this pairwise wallet identifier with the other walletSubjectId you received after logging the user in with One Login<br>
        - Complete the proof of possession challenge from the wallet and extract its did:key<br>
        - Fetch underlying data linked to your unique credential identifier (created in step 2b.)<br>
        - Build the credential as a VC-JWT including its did:key to bind the credential to the wallet<br>
        - Sign the credential with your private key<br>
    4c. Return VC-JWT to the wallet
