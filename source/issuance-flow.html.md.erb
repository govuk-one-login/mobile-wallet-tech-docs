---
title: Understanding GOV.UK Wallet’s credential exchange flow
weight: 40
last_reviewed_on: 2025-03-04
review_in: 2 month
---

# Understand GOV.UK Wallet’s credential exchange flow

This diagram shows the exchange of a credential between a government service and GOV.UK Wallet.

<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
</script>

<html lang="en">
  <body>
    <pre class="mermaid">
  sequenceDiagram
    autonumber
    actor User as User
    participant CRI as Credential Issuer
    participant App as App
    participant OneLogin as OneLogin
    activate User
    User->>CRI: Accesses your service
    activate CRI
    CRI->>OneLogin: Authenticates user
    activate OneLogin
    OneLogin-->>CRI: User is authenticated
    deactivate OneLogin
    CRI->>OneLogin: Fetches user information:<br>POST /userinfo
    activate OneLogin
    OneLogin-->>CRI: Returns user informationn
    deactivate OneLogin
    CRI->>CRI: Generates Credential Offer
    CRI-->>User: Renders Credential Offer<br> as QR code or deep-link
    deactivate CRI
    User->>App: Opens app
    activate App
    App-->OneLogin: Authenticates user
    activate OneLogin
    OneLogin-->>App: User is authenticated
    deactivate OneLogin
    User->>App: Redeems Credential Offer
    App->>CRI: Fetches CRI's Metadata:<br> GET /.well-known/openid-credential-issuer
    activate CRI
    CRI-->>App: Returns Metadata
    deactivate CRI
    App->>OneLogin: Exchanges Pre-Authorized Code<br> for Access Token
    activate OneLogin
    OneLogin->>CRI: Fetches CRI's public keys:<br> GET /.well-known/jwks.json
    activate CRI
    CRI-->>OneLogin: Returns public keys as JSON Web Key Set
    deactivate CRI
    OneLogin->>OneLogin: Verifies Pre-Authorized Code<br> content and signature
    OneLogin-->>App: Issues Access Token
    deactivate OneLogin
    App->>App: Generates Proof of Possession
    App->>CRI: Fetches Credential:<br> POST /credential
    activate CRI
        CRI->>OneLogin: Fetches One Login's public keys:<br> GET /.well-known/jwks.json
        activate OneLogin
        OneLogin-->>CRI: Returns JSON Web Key Set
        deactivate OneLogin
    CRI->>CRI: Verifies Access Token and<br> Proof of Possession content and signature
    CRI->>CRI: Generates Credential
    CRI->>App: Returns Credential
    deactivate CRI
    App->>CRI: Fetches CRI's public key:<br> GET /.well-known/did.json
    activate CRI
    CRI-->>App: Returns public key as DID document
    deactivate CRI
    App->>App: Verifies Credential<br> content and signature
    App->>App: Stores Credential
    App->>CRI: Notifies of success or failure:<br>POST /notification
    activate CRI
    CRI->>CRI: Records notification
    CRI-->>App: Returns empty response
    deactivate CRI
    deactivate App
    deactivate User
    </pre>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
    </script>
  </body>
</html>

## User authenticates with GOV.UK One Login to use your service
1\. Your user accesses your service.

2\. Your service authenticates the user with GOV.UK One Login. If the user is not signed in to an existing session, the OIDC sign in page will open so they can authenticate.

3\. GOV.UK One Login redirects the authenticated user to your redirect URI. Your redirect URI was specified when you onboarded.

4\. Your service sends a request to the GOV.UK One Login GET /userinfo endpoint to exchange the access token for user information.

5\. One Login returns the user information, which includes the wallet subject identifier.

## Your service issues a credential offer
6\. Your service generates a credential offer. Included in this offer is a pre-authorized code signed by your service.

7\. Your service renders the credential offer to the user as a QR code or deep-link.

8\. The user opens the app.

9\. The app prompts the user to authenticate with GOV.UK One Login.

10\. The user who authenticated with your service in a web browser is authenticated with GOV.UK One Login in the app.

11\. The user scans the QR code or opens the deep link. This action redeems the credential offer and communicates it to GOV.UK Wallet.

12\. GOV.UK Wallet sends a GET request to your /.well-known/openid-credential-issuer endpoint to fetch your metadata.

13\. Your service returns its metadata.

14\. GOV.UK Wallet sends a POST request to the GOV.UK One Login /token endpoint to exchange the pre-authorized code in the credential offer for an access token.

15\. One Login sends a GET request to your /.well-known/jwks.json endpoint to fetch your public keys to verify the signature on the Pre-Authorized Code signature issued by your service.

16\. Your service returns its public keys as a JSON Web Key Set (JWKS).

17\. GOV.UK One Login verifies the pre-authorized code content and its signature.

18\. GOV.UK One Login issues an access token that gives GOV.UK Wallet access to your service.

19\. GOV.UK Wallet generates a proof of possession for the key material.

20\. GOV.UK Wallet sends a POST request to your /credential endpoint to request the credential. This request includes the access token issued by GOV.UK One Login (as a bearer token in the authorization header) and the proof of possession generated by GOV.UK Wallet.

## Your service issues a credential
21\. Your service sends a GET request to the One Login /.well-known/jwks.json to fetch its public keys to verify the signature on the Access Token issued by One Login.

22\. GOV.UK One Login returns its public keys as a JSON Web Key Set.

23\. Your service verifies the content and signature of the access token and the proof of possession.

24\. Your service builds and signs the credential.

25\. Your service returns the credential to GOV.UK Wallet.

26\. GOV.UK Wallet sends a GET request to your /.well-known/did.json endpoint to fetch your DID document. The DID document contains your public key which is required to verify the signature on the credential issued by your service.

27\. Your service returns its DID document.

28\. GOV.UK Wallet verifies the content and signature of the credential.

29\. GOV.UK Wallet stores the credential.

30\. GOV.UK Wallet sends a POST request to your /notification endpoint to notify your service. This notification will confirm whether GOV.UK Wallet successfully stored the credential, or failed to store it.

31\. Your service records the notification.

32\. Your service returns an empty response to GOV.UK Wallet.


