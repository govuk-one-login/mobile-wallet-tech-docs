---
title: Setting up your service
weight: 45
last_reviewed_on: 2025-02-14
review_in: 2 month
---

# Setting up your service

## Step 1: Migrate your service to One Login

Services that wish to issue credentials need to use One Login to authenticate their users. This prerequiste will allow you to make sure that any credential you issue is issued to a verified user, logged in simultaneously in your service and GOV.UK Wallet and to no one else.

As part of the onboarding process to One Login, you will be given a `client_id` which identifies you as a relying party of One Login.

Your client_id must be included in the pre-authorised code generated when a new credential is issued (see step 2b. under "[Issuing credentials](issuing-credentials.html)" for more details).


## Step 2: Generate a signing key pair

Verifiable credentials stored in the GOV.UK Wallet need to be cryptographically signed by the credential issuer.

GOV.UK Wallet follows the [OpenID Connect for Verifiable Credential Issuance](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html) standard and require the credential issuer - your service - to create a pre-authorised code (JWT) to secure the credential exchange.

We recommend to use the same key pair to sign and verify credentials and pre-authorised code.

Signing keys should use the Elliptic Curve Digital Signature Algorithm (ECDSA) with curve P-256. If you are using AWS, you should use an Asymmetric `ECC_NIST_P256` key.

[Step 3](set-up-your-service.html#step-3-publish-your-pre-authorised-code-public-signing-key-as-a-jwks) and [Step 4](set-up-your-service.html#step-4-publish-your-credential-public-signing-key-in-a-did-document) respectively cover how your public key must be published as a JWKS and in a DID document at `well-known` URLs.



## Step 3: Publish your pre-authorised code public signing key as a JWKS


## Step 4. Publish your credential public signing key in a DID document



#### Key management

The GOV.UK Wallet, as well as any consumer of verifiable credentials, needs to verify the validity of the credentials your service issues. Credentials issued by your service signed with your private key,  or keys, need to be verified by the public key, or keys, you made available in the `did:web` document.

Your public keys need to stay available throughout the lifecycle of your credentials. A public key used to sign a group of VCs can not be made inactive until after the VCs have expired. Public keys should be kept in an inactive state, available to be verified.

For their credential issuer service, credential issuers should include specific key management features.

The service needs a key refresh process that creates a new asymmetric public or private key pair for signing new VCs, but that retains trust in the previous versions of the public key for verifying.

This is done by making sure the public part of the historical key is retained, while the private key is destroyed. For example, a VC issued by an internal and external issuer.

The service also needs key revocation. This needs to include a notice made from the credential issuer explaining that a specific key should be removed from operational use before the key expires. This will generally happen when the key is lost or compromised. If a key is compromised, it can be used by an attacker to decrypt or forge messages, impersonate an identity, or access sensitive information.

The table below describes the possible states of a key pair used for signing credentials:

| Key State | Description |
|-----------|-------------|
| Created   | A key pair is generated with an activation date in the future. It is not yet used for signing.|
| Active    | A key becomes active on the activation date, and enabled for signing and verifying the VC. There must not be multiple keys active at the same time.|
| Inactive  | A key becomes inactive past its expiration date or time. The public key will still be valid for verifying the VC.|
| Revoked   | A key is destroyed and removed from the issuerâ€™s server, and is not valid for signing or verifying the signatures.|

## Step 5: Publish the metadata of your credentials



## Step 6: Define the content of your credential

The next example shows the structure of a verifiable credential using a JSON Web Token (JWT) to represent a fishing licence.

The JWT must be signed by the private key generated in **[Step 2](/set-up-your-service.html#step-2-generate-a-signing-key-pair)**, and its fields align with your metadata file created in **[Step 5](/set-up-your-service.html#step-5-publish-the-metadata-of-your-credentials)**.

### Header

```
{
  "alg": "ES256",
  "typ": "vc+jwt",
  "cty": "vc",
  "kid": "did:web:example-credential-issuer.mobile.build.account.gov.uk#5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f"
}
```

* `alg` is the cryptographic algorithm used to sign the JWT
* `typ` is the media type of the signed content
* `cty` is the media type of the secured content (i.e. the payload)
* `kid` is the key ID of the key (owned by the signer) which should be used to verify the token's signature

The value of the `kid` parameter must match the value of the `id` parameter in the DID document published by the issuer and which contain the issuer's public key. `kid` must be included in the header to allow the token's audience to identify a specific key in the DID Document. This key must be able to verify the token's signature, ensuring the integrity of the data contained within the token.

### Payload

This example is a possible template for sharing a fishing licence.

```
{
  "iss": "https://example-credential-issuer.mobile.build.account.gov.uk",
  "sub": "did:key:ebfaeb1fd712ebf1c276e12ec21",
  "nbf": "1712664731",
  "iat": "1712664731",
  "exp": "1744221657",
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "<JSON-LD CONTEXT URI FOR ISSUER>"
  ],
  "type": [
    "VerifiableCredential",
    "FishingLicence"
  ],
  "issuer": "https://example-credential-issuer.mobile.build.account.gov.uk",
  "name": "Fishing licence",
  "description": "<OPTIONAL CREDENTIAL DESCRIPTION>",
  "validFrom": "2024-04-09T12:12:11Z",
  "validUntil": "2028-12-10T22:59:59Z",
  "credentialSubject": {
    "id": "did:key:ebfaeb1fd712ebf1c276e12ec21",
    "name": [
      {
        "nameParts": [
          {
            "value": "Sarah",
            "type": "GivenName"
          },
          {
            "value": "Edwards",
            "type": "FamilyName"
          }
        ]
      }
    ],
    "fishingLicenceRecord": [
      {
        "licenceNumber": "009878863",
        "issuanceDate": "2023-12-10",
        "expirationDate": "2028-12-10"
      }
    ]
  }
}
```

* `iss` (Issuer). REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential.

* `sub` (Subject). REQUIRED. The identifier of the holder of the information in the credential. The subject identifier is a decentralised identifier `did:key` generated by the wallet. In the credential issuance flow, the wallet shares its `did:key` with issuer and the issuer makes this the value of the credential's `sub` claim. This cryptographically binds the credential to the wallet.

* `nbf` (Not Before). REQUIRED. The time before which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `iat` (Issued At). OPTIONAL. The time at which the JWT was issued. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `exp` (Expiration Time). OPTIONAL. The time after which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `@context`. REQUIRED. The context of the data exchange. It must be a set of URIs that point to documents that describe the context. The first item in the set must be the URI `"https://www.w3.org/ns/credentials/v2"`.

* `type`. REQUIRED. A set of values indicating the type of verifiable credentials issued by the issuer. The first value in the set must be `VerifiableCredential`

* `issuer`. REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential. Must be the same as the value of the `iss` claim.

* `name`. OPTIONAL. Issuer-specified credential name.

* `description`. OPTIONAL. Issuer-specified credential description.

* `validFrom`. OPTIONAL. It represents the date and time the credential becomes valid, and the same as the value of the `nbf`/`iat` claims. Must be expressed in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

* `validUntil`. OPTIONAL. It represents the date and time the credential stops belong valid. This value specifies the date until which the information within the `credentialSubject` property remains valid. Hence, in the example above, the values of `expirationDate` and `validUntil` are the same. Must be expressed in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

* `credentialSubject`. REQUIRED. An object containing claims about the holder of the verifiable credential.


The physical Fishing Licence expires every five years and we assume the digital version of the Fishing Licence would follow the same approach to expiry. Therefore, the `validUntil` claim in the VC should be set to the `expirationDate` from the fishing licence record.

The `exp` claim is different from the `expirationDate` and `validUntil` claims. Because the VC contains an `expirationDate`, setting the `exp` claim is optional. If used, we recommend using the same or a short value.

<%= warning_text('When setting the expiration of the JWT, you should consider the expiration of the credential or entitlement it represents.') %>

## Step 7: Build your Wallet Credential Issuer

Your service needs to implement the **[Wallet Credential Issuer APIs](/API-reference.html)**.

Please refer to the **[sample reference material](/API-reference.html)** to see an example of a credential issuer service integrated with the GOV.UK Wallet.
