---
title: Setting up your service
weight: 45
last_reviewed_on: 2024-07-02
review_in: 2 month
---

# Setting up your service

## Step 1: Migrate your service to One Login

Services that wish to issue credentials need to use One Login to authenticate their users. This prerequiste will allow you to make sure that any credential you issue is issued to a verified user, logged in simultaneously in your service and GOV.UK Wallet and to no one else.

As part of the onboarding process to One Login, you will be given a `client_id` which identifies you as a relying party of One Login.

Your client_id must be included in the pre-authorised code generated when a new credential is issued (see step 2b. under "[Issuing credentials](issuing-credentials.html)" for more details).


## Step 2: Generate a signing key pair

Verifiable credentials stored in the GOV.UK Wallet need to be cryptographically signed by the credential issuer.

GOV.UK Wallet follows the [OpenID Connect for Verifiable Credential Issuance](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html) standard and require the credential issuer - your service - to create a pre-authorised code (JWT) to secure the credential exchange.

We recommend to use the same key pair to sign and verify credentials and pre-authorised code.

Signing keys should use the Elliptic Curve Digital Signature Algorithm (ECDSA) with curve P-256. If you are using AWS, you should use an Asymmetric `ECC_NIST_P256` key.

[Step 3](set-up-your-service.html#step-3-publish-your-pre-authorised-code-public-signing-key-as-a-jwks) and [Step 4](set-up-your-service.html#step-4-publish-your-credential-public-signing-key-in-a-did-document) respectively cover how your public key must be published as a JWKS and in a DID document at `well-known` URLs.




## Step 3: Publish your pre-authorised code public signing key as a JWKS

The credential exchange is secured by a pre-authorised code generated by the credential and verified by One Login. The pre-authorised code is a JSON Web Token (JWT) that needs to follow specifications set by One Login. Following the specifications in the example below will allow One Login to verify that your pre-authorised code has been cryptographically signed by your credential issuer.

The signing key pair used for the pre-authorised code is the same as the signing key pair for credentials albeit in a different format. The pre-authorised code signing key pair must be in JSON Web Key Sets (JWKS) format and must be published on the well-known path `/.well-known/jwks.json` on the credential issuer’s DNS hostname.

For example, the `jwks.json` file featured in the example would be published at https://test-www.tax.service.gov.uk/hmrc-govwallet-did/.well-known/jwks.json

The following illustrative example shows the `jwks.json` allowing One Login to verify the validity of the pre-authorised code.

```JSON
{
  "keys": [
    {
      "kty": "EC",
      "use": "sig",
      "crv": "P-256",
      "kid": "c204b0f4064243742e544ab87f67701bf2cb672cd6e2c3a39de9a555a2a4bf63",
      "x": "Shc8mJ6fcZikhWM4ofHGSwXTkdqXM8GbPtRzPa7LttA=",
      "y": "OIhg/7rhWfmnWQEgAXzU8fCTggGrS3zj5x76a0lrzJM=",
      "alg": "ES256"
    }
  ]
}
```

Finally, your credential issuer must expose a public `/.well-known/jwks.json` endpoint for One Login to retrieve the JWKS.

## Step 4. Publish your credential public signing key in a DID document

When a government organisation issues a credential to GOV.UK Wallet, it must publish public signing keys so that the wallet and verifiers can verify the validity of the credential. The public signing key for credentials is published in a decentralised identifier (DID) document. This document must include a public key of the key pairs used to sign credentials.

The DID document should be in JSON format, and contains verification methods for all credentials your service will issue. One Login uses public keys as verification methods.

The following illustrative example shows a DID document allowing users to save a National Insurance number card to the wallet.

```JSON
{
  "@context" : [ "https://www.w3.org/ns/did/v1", "https://w3id.org/security/suites/ed25519-2020/v1" ],
  "id" : "did:web:test-www.tax.service.gov.uk/hmrc-govwallet-did",
  "verificationMethod" : [ {
    "id" : "did:web:test-www.tax.service.gov.uk/hmrc-govwallet-did#key-0",
    "type" : "JsonWebKey2020",
    "controller" : "did:web:test-www.tax.service.gov.uk/hmrc-govwallet-did",
    "publicKeyJwk" : {
      "kid" : "key-0",
      "kty" : "EC",
      "crv" : "P-256",
      "x" : "Shc8mJ6fcZikhWM4ofHGSwXTkdqXM8GbPtRzPa7LttA=",
      "y" : "OIhg/7rhWfmnWQEgAXzU8fCTggGrS3zj5x76a0lrzJM="
    }
  } ],
  "assertionMethod" : [ "did:web:nino.hmrc.gov.uk#3ebc65f7f0ddcbd2cee2b48b8df38" ]
}
```
A did:web document must be published on the well-known path `/.well-known/did.json` on the credential issuer’s DNS hostname.

For example, the HMRC `did:web` file featured in the example would be published at https://test-www.tax.service.gov.uk/hmrc-govwallet-did/.well-known/did.json.

The fields in the example document are:

* `@context` : This property must be present, and include a URL that defines short-form aliases representing attributes and values in verifiable credentials. In this case "https://www.w3.org/ns/did/v1", "https://w3id.org/security/suites/ed25519-2020/v1" is used.

* `id` : This is the decentralised identifier (DID) of your service. Because credential issuers use the `did:web` method, the general format is `"did:web:{URL of your issuer service}"`

* `verificationMethod` : This is an array of the verification methods that the credential issuer has implemented. Any private key used to sign credentials issued to the GOV.UK Wallet must have a corresponding public key in this array.

* `verificationMethod.id` must follow the format  did:web:{URL of your issuer service}#{unique key identifier}. The {URL of your issuer service} could be, for example, issuer.your-service.gov.uk/wallet/. The {unique key identifier} is a hashed version of the KMS Key ID, for example #3ebc655f7f00ddcbd52cee2b48b8df38.

Using this example, your DID follows the format `did:web:issuer.your-service.gov.uk/wallet/#3ebc655f7f00ddcbd52cee2b48b8df38`, and your DID document must be published at https://issuer.your-service.gov.uk/wallet/.well-known/did.json.

When receiving your credential, the wallet can find, or resolve, your DID document using the kid claim in the JWT header. There is more information about this in [Step 6: Define the content of your credential](/set-up-your-service.html#step-6-define-the-content-of-your-credential).

* `verificationMethod.type` indicates how a verifier can independently verify a proof. In GOV.UK One Login, we use a cryptographic public key as a verification method. Used this way, it verifies that the signer, which in this case is your government service, possesses the associated cryptographic private key. We use the JSON Web Signature 2020 specification, and the "JsonWebKey2020" type.

* `verificationMethod.controller` refers to the entity that is authorised to make changes to the DID document, your service. In the example, it is identified by the DID `"did:web:test-www.tax.service.gov.uk/hmrc-govwallet-did"`.

* `verificationMethod.publicKeyJwk` : indicates the type of key, a JSON Web Key, followed by the public key.

#### Key management

The GOV.UK Wallet, as well as any consumer of verifiable credentials, needs to verify the validity of the credentials your service issues. Credentials issued by your service signed with your private key,  or keys, need to be verified by the public key, or keys, you made available in the `did:web` document.

Your public keys need to stay available throughout the lifecycle of your credentials. A public key used to sign a group of VCs can not be made inactive until after the VCs have expired. Public keys should be kept in an inactive state, available to be verified.

For their credential issuer service, credential issuers should include specific key management features.

The service needs a key refresh process that creates a new asymmetric public or private key pair for signing new VCs, but that retains trust in the previous versions of the public key for verifying.

This is done by making sure the public part of the historical key is retained, while the private key is destroyed. For example, a VC issued by an internal and external issuer.

The service also needs key revocation. This needs to include a notice made from the credential issuer explaining that a specific key should be removed from operational use before the key expires. This will generally happen when the key is lost or compromised. If a key is compromised, it can be used by an attacker to decrypt or forge messages, impersonate an identity, or access sensitive information.

The table below describes the possible states of a key pair used for signing credentials:

| Key State | Description |
|-----------|-------------|
| Created   | A key pair is generated with an activation date in the future. It is not yet used for signing.|
| Active    | A key becomes active on the activation date, and enabled for signing and verifying the VC. There must not be multiple keys active at the same time.|
| Inactive  | A key becomes inactive past its expiration date or time. The public key will still be valid for verifying the VC.|
| Revoked   | A key is destroyed and removed from the issuer’s server, and is not valid for signing or verifying the signatures.|

## Step 5: Publish the metadata of your credentials

To fetch a credential from a credential issuer, GOV.UK Wallet needs to obtain credential metadata published by the organisation who issues the credential. The metadata is public, to indicate to wallets and verifiers what credentials that issuer offers.

The metadata file is a JSON file published at the well-known path: `/.well-known/openid-credential-issuer`.

Credential issuers using GOV.UK Wallet, must produce and publish a metadata document that:

* supports English and Welsh

* controls how fields should be named in each language, for example `certificateNumber` rendered as "Certificate number"

* highlights key fields visually for the user, for example document name, primary and auxiliary fields

This illustrative example shows how a credential metadata JSON file would represent a basic DBS disclosure certificate:

```JSON
{
  "credential_issuer": "https://issuer.dbs.gov.uk",
  "authorization_servers": ["https://sts.account.gov.uk"],
  "credential_endpoint": "https://issuer.dbs.gov.uk/credential",
  "credential_configurations_supported": {
    "basicDisclosure": {
      "format": "jwt_vc_json",
      "id": "BasicDisclosure_JWT",
       "credential_definition": {
      "types": [
        "VerifiableCredential",
        "basicDisclosureCredential"
      ]},
      "cryptographic_binding_methods_supported": [
        "did"
      ],
      "cryptographic_suites_supported": [
        "ES256K"
      ],
      "proof_types_supported": {
        "jwt": {
          "proof_signing_alg_values_supported": [
            "ES256"
          ],
          "key_attestations_required": {
          }
        }
      },
      "display": [
        {
          // Name of the credential always displayed at the top of the card
          "name": "Basic DBS disclosure certificate",
          "locale": "en-GB",
          "logo": {
            "url": "https://issuer.gov.uk/assets/logo.png",
            "alt_text": "a square logo of the Disclosure and Barring Service"
          },
          "background_color": "#12107c",
          "text_color": "#FFFFFF"
        },
        {
          "name": "Tystysgrif datgelu DBS Sylfaenol",
          "locale": "en-CY",
          "logo": {
            "url": "https://issuer.gov.uk/assets/logo.png",
            "alt_text": "logo sgwâr DBS"
          },
          "background_color": "#12107c",
          "text_color": "#FFFFFF"
        }
      ],
      // Biographic information about the subject of the credential
      "credentialSubject": {
        "familyName": {
          "display": [
            {
              "field": "Auxiliaryfield1",
              "name": "Surname",
              "locale": "en-GB"
            },
            {
              "field": "Auxiliaryfield1",
              "name": "Cyfenw",
              "locale": "cy-GB"
            }
          ]
        },
        "givenName": {
          "display": [
          {
            "field": "Auxiliaryfield2",
            "name": "Forename(s)",
            "locale": "en-GB"
          },
          {
            "field": "Auxiliaryfield2",
            "name": "Enw(au)",
            "locale": "cy-GB"
          }
          ]
        },
        "birthDate": {
          "display": [
            {
              "field": "Auxiliaryfield3",
              "name": "Date of birth",
              "locale": "en-GB"
            },
            {
              "field": "Auxiliaryfield3",
              "name": "Dyddiad geni",
              "locale": "cy-GB"
            }
          ]
        },
        "address": {
          "display": [
            {
              "field": "Auxiliaryfield4",
              "name": "First line of address",
              "locale": "en-GB"
            },
            {
              "field": "Auxiliaryfield4",
              "name": "Llinell gyntaf cyfeiriad",
              "locale": "cy-GB"
            }
          ]
        },
        // Issuer specific data describing the credential
        "BasicdisclosureRecord": {},
        "outcome": {
          "display": [
            {
              "field": "PrimaryField",
              "name": "Outcome",
              "locale": "en-GB"
            },
            {
              "field": "PrimaryField",
              "name": "Canlyniad",
              "locale": "cy-GB"
            }
          ]
        },
        // Date when check against Police National Computer (PNC) was carried out
        "disclosureDate": {
          "display": [
            {
              "field": "KeyField1",
              "name": "Disclosure date",
              "locale": "en-GB"
            },
            {
              "field": "KeyField1",
              "name": "Dyddiad datgelu",
              "locale": "cy-GB"
            }
          ]
        },
        // 9-digit certificate number
        "certificateNumber": {
          "display": [
            {
              "field": "KeyField2",
              "name": "Certificate number",
              "locale": "en-GB"
            },
            {
              "field": "KeyField2",
              "name": "Rhif y dystysgrif",
              "locale": "cy-GB"
            }
          ]
        }
      }
    }
  }
}
```

## Step 6: Define the content of your credential

The next example shows the structure of a verifiable credential using a JSON Web Token (JWT) to represent a DBS basic disclosure certificate.

The JWT must be signed by the private key generated in **[Step 2](/set-up-your-service.html#step-2-generate-a-signing-key-pair)**, and its fields align with your metadata file created in **[Step 5](/set-up-your-service.html#step-5-publish-the-metadata-of-your-credentials)**.

### Header

```
{
  "alg": "ES256",
  "typ": "vc+jwt",
  "cty": "vc",
  "kid": "did:web:[environment.]issuer.dbs.gov.uk#[unique key id]"
}
```

Description of the JWT header parameters:

* `alg` is the cryptographic algorithm used to sign the JWT
* `typ` is the media type of the signed content
* `cty` is the media type of the secured content (i.e. the payload)
* `kid` is the key ID of the key (owned by the signer) which should be used to verify the token's signature

The value of the `kid` parameter must match the value of the `id` parameter in the DID document published by the issuer and which contain the issuer's public key. `kid` must be included in the header to allow the token's audience to identify a specific key in the DID Document. This key must be able to verify the token's signature, ensuring the integrity of the data contained within the token.

### Payload

This example is a possible template for sharing a DBS basic disclosure certificate.

```
{
  "iss": "https://test.issuer.dbs.gov.uk/",
  "sub": "did:key:ebfaeb1fd712ebf1c276e12ec21",
  "iat": "1712664731",
  "nbf": "1712664731",
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "<JSON-LD CONTEXT URI FOR ISSUER>"
  ],
  "type": [
    "VerifiableCredential",
    "basicDisclosureCredential"
  ],
  "issuer": "https://test.issuer.dbs.gov.uk/",
  "name": "Basic DBS check result",
  "description": "<OPTIONAL CREDENTIAL DESCRIPTION>",
  "validFrom": "2024-04-09T12:12:11Z",
  "validUntil": "2034-04-08T22:59:59Z",
  "credentialSubject": {
    "id": "did:key:ebfaeb1fd712ebf1c276e12ec21",
    "issuanceDate": "2023-12-10",
    "expirationDate": "2024-12-10",
    "name": [
      {
        "nameParts": [
          {
            "value": "Sarah",
            "type": "GivenName"
          },
          {
            "value": "Elizabeth",
            "type": "GivenName"
          },
          {
            "value": "Edwards",
            "type": "FamilyName"
          }
        ]
      }
    ],
    "birthDate": [
      {
        "value": "1985-10-18"
      }
    ],
    "address": [
      {
        "firstLine": "10 Princess Parade"
      }
    ],
    "basicDisclosure": [
      {
        "certificateNumber": "009878863",
        "outcome": "Result clear",
        "disclosureDate": "2023-12-10"
      }
    ],
    "documentMetadata": [
      {
        "multipleCredentialsAllowed": "true"
      }
    ]
  }
}
```

Here are the explanations of the JWT claims in the example:

* `iss` (Issuer). REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential.

* `sub` (Subject). REQUIRED. The identifier of the holder of the information in the credential. The subject identifier is a decentralised identifier `did:key` generated by the wallet. In the credential issuance flow, the wallet shares its `did:key` with issuer and the issuer makes this the value of the credential's `sub` claim. This cryptographically binds the credential to the wallet.

* `nbf` (Not Before). REQUIRED. The time before which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `iat` (Issued At). OPTIONAL. The time at which the JWT was issued. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `@context`. REQUIRED. The context of the data exchange. It must be a set of URIs that point to documents that describe the context. The first item in the set must be the URI `"https://www.w3.org/ns/credentials/v2"`.

* `type`. REQUIRED. A set of values indicating the type of verifiable credentials issued by the issuer. The first value in the set must be `VerifiableCredential`

* `issuer`. REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential. Must be the same as the value of the `iss` claim.

* `credentialSubject`. REQUIRED. An object containing claims about the holder of the verifiable credential.

* `name`. OPTIONAL. Issuer-specified credential name.

* `description`. OPTIONAL. Issuer-specified credential description.

* `validFrom`. OPTIONAL. Must be a string in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/). It represents the date and time the credential becomes valid. Must be the same as the value of the `nbf` claim.

* `validUntil`. OPTIONAL.  Must be a string in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/). It represents the date and time the credential stops belong valid. This value specifies the date until which the information within the `credentialSubject` property remains valid. Hence, in the example above, the values of `expirationDate` and `validUntil` are the same.

* `exp` (Expiration Time). OPTIONAL. The time after which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

<%= warning_text('When setting the expiration of the JWT, you should consider the expiration of the credential or entitlement it represents.') %>

The `exp` claim is different from the `expirationDate` in the `credentialSubject`. As an issuer, you can choose to set `expirationDate` on the VC to reflect the expiration of the entitlement itself. For example, a DBS Basic Disclosure Certificate may be valid for 12 months, while a Veteran Card may be valid for three years. You can also choose to set an optional `exp` claim that will invalidate the VC at a future date you decide. In the Basic Disclosure check example above, the JWT does not expire, just like a paper certificate will continue to exist. However, because the online record of the disclosure in the share code system is deleted after 12 months, the `expirationDate` parameter is used in the VC object to reflect this lifecycle of the credential’s entitlement.


## Step 7: Build your Wallet Credential Issuer

Your service needs to implement the **[Wallet Credential Issuer APIs](/API-reference.html)**.

Please refer to the **[sample reference material](/API-reference.html)** to see an example of a credential issuer service integrated with the GOV.UK Wallet.
