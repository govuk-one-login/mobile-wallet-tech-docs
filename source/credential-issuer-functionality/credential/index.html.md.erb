---
title: Credential
weight: 5
last_reviewed_on: 2025-03-05
review_in: 2 months
---

# Credential

### Step 4a. Validate the access token with One Login

The wallet shares with your service an access token created by the One Login token service.

Your service must check that the access token is indeed originated from One Login.

For this your service must fetch the public signing key (JWKS) from the One Login token service at the `/.well-known/jwks.json` endpoint and check that the access token is valid.


### Step 4b. Validate credential request, which includes:

This step includes the following steps to determine that the user requesting the credential is the same one using your service and that the credential issued is cryptographically bound to the wallet. This can be broken down in the following sub-steps:

#### Extract the pairwise wallet identifier walletSubjectId from the access token

The access token contains a pairwise identifier `walletSubjectId` starting with `urn:fdc:wallet.account.gov.uk:`. This pairwise identifier is created by One Login to verify that the same user is logged in simultaneously in your service and the wallet.

### Compare this pairwise wallet identifier with the other walletSubjectId you received after logging the user in with One Login

This step is crucial to ensure that your credential is issued only to the right user. For this you must compare the pairwise identifier `walletSubjectId` you received when your user logged with One Login (Step 1) to the `walletSubjectId` in the access token you received from the wallet (Step 4a).

<%= warning_text('If both pairwise identifiers do not match, it means the wallet trying to acquire the credential does not belong to the person who is logged in your service.') %>

In this scenario, **your credential issuer should stop the issuance flow** and if needed keep a record of the attempt for audit and fraud prevention purpose. Additional fraud detection mechanisms will be added at a future stage.


#### Complete the proof of possession challenge from the wallet and extract its did:key

Each wallet instance must be uniquely identified so your service can bind a credential with this wallet instance. For this GOV.UK Wallet uses a [W3C Decentralised Identifier (DID)](https://www.w3.org/TR/did-core/).

GOV.UK Wallet uses a specific type of DID called `did:key` to cryptographically bind credentials to a wallet instance.

A [did:key](https://w3c-ccg.github.io/did-method-key/) is a DID (Decentralized Identifier) method. The DID represents the public key of an asymmetric key pair generated when the GOV.UK Wallet is installed on a device. The private key never leaves the device, whereas the did:key is shared with credential issuers and verifiers, allowing credentials to be cryptographically bound to a specific GOV.UK Wallet instance.

When requesting the credential from your `/credential` endpoint, the wallet also includes a **cryptographic challenge** in the request. This challenge is a random and unique c-nonce (provided by One Login) that has been signed into a token (JWT) with the wallet's private key. The `did:key` (i.e., the wallet's public key) is included in the proof JWT's header claim `kid`.

Your credential issuer, upon receiving the credential request with the challenge, verifies the proof signature with the public `did:key`. A successful verification demonstrates the wallet's ownership of the private asymmetric pair to that public `did:key`. This prevents a credential being stolen by a malicious wallet instance.

#### Fetch underlying data for the credential

Refer to your issuance cache (see Step 2b.) to find the credential identifier and retrieve the underlying data from your database that will go in the credential. That is, retrieve all the fields required in the Fishing Licence credential (e.g. name, fishing licence number, expiration date.) associated with a given individual.

#### Build the credential as a VC-JWT including its did:key to bind the credential to the wallet

Credentials follow the [W3C VVerifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/#dfn-verifiable-credential). The definition of the content of your credential, must follow the One Login conventions [see Step 6. in Setting up your service](/set-up-your-service.html#step-6-define-the-content-of-your-credential)

Your credential issuer can now create the verifiable credential (VC) and cryptographically bind it to the wallet by writing the `did:key` as the verifiable credential's subject (the `sub` claim within the VC payload).

Example verifiable credential payload with the `did:key` as the `sub` claim:

```
{
  "iss": "https://example-credential-issuer.mobile.build.account.gov.uk",
  "sub": "did:key:ebfaeb1fd712ebf1c276e12ec21",
  "iat": "1712664731",
  "nbf": "1712664731",
  "exp": "1744221657",
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "<JSON-LD CONTEXT URI FOR ISSUER>"
  ],
  "type": [
    "VerifiableCredential",
    "FishingLicence"
  ],
  "issuer": "https://example-credential-issuer.mobile.build.account.gov.uk",
  "name": "Fishing licence",
  "description": "<OPTIONAL CREDENTIAL DESCRIPTION>",
  "validFrom": "2024-04-09T12:12:11Z",
  "validUntil": "2028-12-10T22:59:59Z",
  "credentialSubject": {
    "id": "did:key:ebfaeb1fd712ebf1c276e12ec21",
    "issuanceDate": "2023-12-10",
    "expirationDate": "2028-12-10",
    "name": [
      {
        "nameParts": [
          {
            "value": "Sarah",
            "type": "GivenName"
          },
          {
            "value": "Edwards",
            "type": "FamilyName"
          }
        ]
      }
    ],
    "fishingLicence": [
      {
        "licenceNumber": "009878863"
        "issuanceDate": "2023-12-10",
        "expirationDate": "2028-12-10"
      }
    ]
  }
}
```

For more information about how did:key are created, please refer to [For more details about credential binding](/issuing-credentials.html#for-more-details-about-credential-binding)

#### Sign the credential with your private key

Finally, use your private signing key to sign the JWT and return to the wallet.

## For more details about credential binding

### Binding credentials to users

GOV.UK Wallet uses a `did:key` to cryptographically bind credentials to the user's wallet.

A [did:key](https://w3c-ccg.github.io/did-method-key/) is a DID (Decentralized Identifier) method. The DID represents the public key of an asymmetric key pair generated when the GOV.UK Wallet is installed on a device. The private key never leaves the device, whereas the did:key is shared with credential issuers and verifiers, allowing credentials to be cryptographically bound to a specific GOV.UK Wallet instance.

The GOV.UK Wallet creates a did:key from a **P-256** (also known as Secp256r1) elliptic curve public key.

### The did:key format

The did:key method is used to transfer public keys.

The format of a did:key is `did:key:multibaseValue`. The `multibaseValue` is the base58-btc multibase string representation of concatenating the multicodec identifier for the public key type and the compressed public key.

````
did-key-format := did:key:MULTIBASE(base58-btc, MULTICODEC(public-key-type, raw-public-key-bytes))
````

In Elliptic Curve Cryptography (ECC), the public key is a pair of `x` and `y` coordinates. A compressed public key is the `x` coordinate, which is 32 bytes in length, with a prefix, of 1 byte in length, that indicates whether the `y` coordinate is even or odd. The prefix is `02` if the `y` coordinate is even and `03` if it is odd. The resulting compressed public key is **33 bytes** in length:

````
Public key: 52972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab288742f4dc97d9edb6fd946babc002fdfb06f26caf117b9405ed79275763fdb1c

Public key (x coordinate): 52972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2
Public key (y coordinate): 88742f4dc97d9edb6fd946babc002fdfb06f26caf117b9405ed79275763fdb1c

// y coordinate is even so "02" is prepended to the x coordinate
Public key (compressed): 0252972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2
````

The `multibaseValue` is generated as follows:

1. Encode the compressed public key as bytes
1. Prefix the key bytes with the **curve multicodec value** encoded as **unsigned varint** (variable length integers)
- the multicodec hexadecimal value of a P-256 elliptic curve public key is `0x1200`, in varint-encoded bytes that is `[0x80, 0x24]`
1. Encode the above with **base58-btc** and then prefix it with `"z"` to indicate the base58-btc encoding - the result is the `multibaseValue`


The following is an example of a did:key derived from a base-58 encoded P-256 public key:

````
did:key:zDnaewZMz7MN6xSaAFADkDZJzMLbGSV25uKHAeXaxnPCwZomX
````

All DIDs derived from a P-256 public key always start with `"zDn"`.

#### Verifying a credential
To share a verifiable credential with a verifier, the wallet creates a **verifiable presentation** containing the verifiable credential, and signs it with its private key.

The verifier must be able to confirm that the system presenting the credential (i.e. the wallet) is also the intended holder of that credential. The verifier must confirm **proof of possession** of the verifiable credential. This is done by verifying that the entity which signed the verifiable presentation is the same as the subject of the verifiable credential. In other words, the did:key in the verifiable credential must be able to verify the signature on the verifiable presentation.


## Credential Content

The next example shows the structure of a verifiable credential using a JSON Web Token (JWT) to represent a fishing licence.


### Header

```
{
  "alg": "ES256",
  "typ": "vc+jwt",
  "cty": "vc",
  "kid": "did:web:example-credential-issuer.mobile.build.account.gov.uk#5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f"
}
```

* `alg` is the cryptographic algorithm used to sign the JWT
* `typ` is the media type of the signed content
* `cty` is the media type of the secured content (i.e. the payload)
* `kid` is the key ID of the key (owned by the signer) which should be used to verify the token's signature

The value of the `kid` parameter must match the value of the `id` parameter in the DID document published by the issuer and which contain the issuer's public key. `kid` must be included in the header to allow the token's audience to identify a specific key in the DID Document. This key must be able to verify the token's signature, ensuring the integrity of the data contained within the token.

### Payload

This example is a possible template for sharing a fishing licence.

```
{
  "iss": "https://example-credential-issuer.mobile.build.account.gov.uk",
  "sub": "did:key:ebfaeb1fd712ebf1c276e12ec21",
  "nbf": "1712664731",
  "iat": "1712664731",
  "exp": "1744221657",
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "<JSON-LD CONTEXT URI FOR ISSUER>"
  ],
  "type": [
    "VerifiableCredential",
    "FishingLicence"
  ],
  "issuer": "https://example-credential-issuer.mobile.build.account.gov.uk",
  "name": "Fishing licence",
  "description": "<OPTIONAL CREDENTIAL DESCRIPTION>",
  "validFrom": "2024-04-09T12:12:11Z",
  "validUntil": "2028-12-10T22:59:59Z",
  "credentialSubject": {
    "id": "did:key:ebfaeb1fd712ebf1c276e12ec21",
    "name": [
      {
        "nameParts": [
          {
            "value": "Sarah",
            "type": "GivenName"
          },
          {
            "value": "Edwards",
            "type": "FamilyName"
          }
        ]
      }
    ],
    "fishingLicenceRecord": [
      {
        "licenceNumber": "009878863",
        "issuanceDate": "2023-12-10",
        "expirationDate": "2028-12-10"
      }
    ]
  }
}
```

* `iss` (Issuer). REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential.

* `sub` (Subject). REQUIRED. The identifier of the holder of the information in the credential. The subject identifier is a decentralised identifier `did:key` generated by the wallet. In the credential issuance flow, the wallet shares its `did:key` with issuer and the issuer makes this the value of the credential's `sub` claim. This cryptographically binds the credential to the wallet.

* `nbf` (Not Before). REQUIRED. The time before which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `iat` (Issued At). OPTIONAL. The time at which the JWT was issued. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `exp` (Expiration Time). OPTIONAL. The time after which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `@context`. REQUIRED. The context of the data exchange. It must be a set of URIs that point to documents that describe the context. The first item in the set must be the URI `"https://www.w3.org/ns/credentials/v2"`.

* `type`. REQUIRED. A set of values indicating the type of verifiable credentials issued by the issuer. The first value in the set must be `VerifiableCredential`

* `issuer`. REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential. Must be the same as the value of the `iss` claim.

* `name`. OPTIONAL. Issuer-specified credential name.

* `description`. OPTIONAL. Issuer-specified credential description.

* `validFrom`. OPTIONAL. It represents the date and time the credential becomes valid, and the same as the value of the `nbf`/`iat` claims. Must be expressed in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

* `validUntil`. OPTIONAL. It represents the date and time the credential stops belong valid. This value specifies the date until which the information within the `credentialSubject` property remains valid. Hence, in the example above, the values of `expirationDate` and `validUntil` are the same. Must be expressed in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

* `credentialSubject`. REQUIRED. An object containing claims about the holder of the verifiable credential.


The physical Fishing Licence expires every five years and we assume the digital version of the Fishing Licence would follow the same approach to expiry. Therefore, the `validUntil` claim in the VC should be set to the `expirationDate` from the fishing licence record.

The `exp` claim is different from the `expirationDate` and `validUntil` claims. Because the VC contains an `expirationDate`, setting the `exp` claim is optional. If used, we recommend using the same or a short value.

<%= warning_text('When setting the expiration of the JWT, you should consider the expiration of the credential or entitlement it represents.') %>