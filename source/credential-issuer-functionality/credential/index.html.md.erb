---
title: Credential
weight: 5
last_reviewed_on: 2025-04-18
review_in: 6 months
---

# Credential

The credential issuer credential endpoint is a required endpoint defined in the [OID4VCI](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-8) specification. It's where GOV.UK Wallet, acting on behalf of the user, requests and receives verifiable credentials from the credential issuer. Government departments acting as credential issuers must implement this endpoint according to the specification to ensure seamless integration with the GOV.UK Wallet.

## Technical details

### Endpoint location

The credential endpoint's location is implementation-specific within the OID4VCI specification.

The credential issuer must publish the location of their credential endpoint in their [metadata](/credential-issuer-functionality/metadata/api.html#well-known-openid-credential-issuer) using the `credential` parameter.

### Request format

The credential endpoint must accept HTTP POST requests.

GOV.UK Wallet will send a request to the credential issuer's credential endpoint to get a verifiable credential. This request is sent after the authorisation process is completed, and GOV.UK Wallet has received an access token from GOV.UK One Login.

The credential request will include:

- An access token to authenticate the request (in the request Authorization header) - this is a JWT issued by GOV.UK One Login
- A proof of possession of the key that will be used to bind the credential to GOV.UK Wallet (in the request body) - this is a JWT issued by GOV.UK Wallet

The credential request must be validated by the credential issuer to help ensure secure credential issuance and prevent unauthorised parties from getting credentials they should not have access to.

#### Authorization header

The request must include an access token issued by GOV.UK One Login as a bearer token in the authorization header. The credential issuer must validate this access token to make sure that:

- the access token was issued by GOV.UK One Login
- the request is from the expected user

The access token used in the credential request is specifically for authorizing the issuance of a verifiable credential. It's different from the access token used when the user initially logs in to GOV.UK One Login, which is for authentication purposes. Because they have different roles, they are signed and verified using different keys.

To validate the access token, you should complete the following steps.

Verify the access token signature:

- retrieve the GOV.UK One Login JSON Web Key Set (JWKS) from their JWKS endpoint
- compare the `kid` (key ID) parameter in the access token header with the `kid` values in the retrieved JWKS
- ensure the `alg` (algorithm) parameter in the access token header corresponds to the algorithm specified for the matching public key found in the JWKS
- cryptographically verify the signature on the access token using the matching public key from the JWKS and the specified algorithm

Validate the header parameters by making sure that:

- the `typ` (Type) parameter is `"at+jwt"`

Validate the payload claims by verifying that:

- the value of the `iss` (issuer) claim matches GOV.UK One Login URL: `"https://token.integration.account.gov.uk"` (integration) or `"https://token.account.gov.uk"` (production)
- the value of the `aud` (audience) claim is the same client ID you received when you registered your service to use GOV.UK One Login
- the value of the `sub` (subject - this is the wallet subject identifier) claim matches the value stored in your cache for this specific credential issuance flow
- the value of the `credential_identifiers` claim matches the value stored in your cache for this specific credential issuance flow
- the value of the `c_nonce` claim matches the value of the `nonce` claim in the [proof of possession](/credential-issuer-functionality/credential/#request-body)
- this API has not received another access token with the same `jti` (JWT ID) that is still within its validity period

##### Wallet Subject Identifier (`sub` Claim)

The `sub` claim, starting with `urn:fdc:wallet.account.gov.uk:`, is a pairwise identifier generated by GOV.UK One Login. This identifier is crucial for verifying that the same user is logged into both your service and GOV.UK Wallet from where the credential request was sent. Your credential issuer should compare the `sub` claim extracted from the access token with the wallet subject identifier obtained during the user's initial authentication with GOV.UK One Login.

This comparison ensures your credential is issued only to the right user. If the identifiers do not match, the wallet trying to acquire the credential does not belong to the person logged in your service. In this scenario, **your credential issuer must stop the issuance flow** and consider logging the attempt for audit and fraud prevention. This is a critical security step to prevent unauthorized credential issuance.

Below is an example of an access token header and payload, respectively:

```
{
  "alg": "ES256",
  "typ": "at+jwt",
  "kid": "8f9ec544-f5df-4d37-a32d-a5defd78ab0f"
}
```

```
{
  "sub": "urn:fdc:wallet.account.gov.uk:2024:DtPT8x-dp_73tnlY3KNTiCitziN9GEherD16bqxNt9i",
  "iss": "https://token.account.gov.uk",
  "aud": "https://example-credential-issuer.gov.uk",
  "credential_identifiers": [
    "daa01d3e-b17c-4c8a-8adf-ef808b456c9c"
  ],
  "c_nonce": "657a09cd-7165-486d-a858-065eb23f7a8d",
  "jti": "62b45850-4c5c-4696-983a-af66450301d4"
}
```

#### Request body

The request body must be in JSON format and contain the following parameters:

| Parameter          | Description                                                                                                                      | Value(s)       |
|--------------------|----------------------------------------------------------------------------------------------------------------------------------|----------------|
| `proof`            | A JSON containing a single proof of possession of the cryptographic key material to which the issued credential will be bound to |                |
| `proof.proof_type` | A string indicating the type of proof being presented.                                                                           | Must be `jwt`. |
| `proof.jwt`        | The actual JSON Web Token (JWT) that serves as the proof. This JWT is generated by GOV.UK Wallet.                                |                |

Below is an example of a request body:

```
{
   "proof":{
      "proof_type":"jwt",
      "jwt":"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDprZXk6ekRuYWVTR2ZTUU1Zdm5MYkxXRXViaGhHRFBvcTdwQTlNTU52dW12YnNtTUNab3ZVUiJ9.eyJpc3MiOiJ1cm46ZmRjOmdvdjp1azp3YWxsZXQiLCJhdWQiOiJodHRwczovL2V4YW1wbGUtY3JlZGVudGlhbC1pc3N1ZXIuZ292LnVrIiwiaWF0IjoxNzQ1MjMzNjIzODE2LCJub25jZSI6IjY1N2EwOWNkLTcxNjUtNDg2ZC1hODU4LTA2NWViMjNmN2E4ZCJ9.UNszjzQeT6Vv8-n5kEAoHIr84Tf2gCJxMzhiUBBPPHdv6l0JK3WzNVaV0V6wgkTccLozOa7y3_3lp2iM4KjOOw"
   }
}
```

The JWT-based proof of possession is a cryptographic mechanism through which the GOV.UK Wallet proves it controls the private key that will be used to bind the credential to the wallet. This step is critical to ensure credentials are issued to their rightful holder.

Generated by the GOV.UK Wallet, this token consists of a cryptographic client nonce (from the access token issued by GOV.UK One Login token service) that has been signed into a token with the wallet's private signing key. The `did:key` (i.e., the wallet's public key) is included in the token's header `kid` parameter.

Your credential issuer, upon receiving the credential request, verifies the proof of possession signature with the `did:key`. A successful verification demonstrates the wallet's ownership of the private asymmetric pair to that public `did:key`.

There is more information about [the did:key method](/credential-issuer-functionality/credential/#the-did-key-format).

To validate the proof, you should complete the following steps.

Verify the proof signature:

- resolve the `kid` (key ID - this is the `did:key`) to obtain the public key
- ensure the `alg` (algorithm) parameter in the proof header is `ES256` and matches the algorithm of the `did:key`
- cryptographically verify the signature on the proof using the resolved public key and the specified algorithm

Validate the header parameters by making sure that:

- the `typ` (Type) parameter is `"jwt"`

Validate the payload claims by verifying that:

- the value of the `iss` (issuer) claim matches GOV.UK Wallet identifier - `urn:fdc:gov:uk:wallet`
- the value of the `aud` (audience) claim is the same client ID you received when you registered your service to use GOV.UK One Login
- the value of the `iat` (issued at ) claim matches the value stored in your cache for this specific credential issuance flow
- the value of the `nonce` claim matches the value of the `c_nonce` claim in the access token

Below is an example of a proof header and payload, respectively:

```
{
  "alg": "ES256",
  "typ": "JWT",
  "kid": "did:key:zDnaeSGfSQMYvnLbLWEubhhGDPoq7pA9MMNvumvbsmMCZovUR"
}
```

```
{
  "iss": "urn:fdc:gov:uk:wallet",
  "aud": "https://example-credential-issuer.gov.uk",
  "iat": 1745233623816,
  "nonce": "bd423745-7705-45c2-9f51-6ae8dcac5589"
}
```

More information about the credential request can be found in the [OID4VCI specification](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-8.2).

### Response format

Upon successful validation of the request, the credential endpoint must return with a 200 OK HTTP status code and a JSON response following the [OID4VCI specification](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-8.3). The issued credential itself must adhere to the [W3C Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

Refer to your issuance cache to find the credential identifier and retrieve the underlying data from your database that will go in the credential. In the fishing license example, you would retrieve all the fields required in the Fishing Licence credential (e.g. name, fishing licence number, expiration date) associated with a given individual.

This example shows the structure of a verifiable credential using a JSON Web Token (JWT) to represent a fishing licence. The payload `sub` claim is the `did:key` from the proof of possession.

Your credential issuer can now create the verifiable credential (VC) and cryptographically bind it to the wallet by writing the `did:key` as the verifiable credential's subject (the `sub` claim within the VC payload).

There is more information about [binding credentials to a wallet](/credential-issuer-functionality/credential/#further-guidance-on-credential-binding).


#### Header

```
{
  "alg": "ES256",
  "typ": "vc+jwt",
  "cty": "vc",
  "kid": "did:web:example-credential-issuer.gov.uk#5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f"
}
```

* `alg` is the cryptographic algorithm used to sign the JWT
* `typ` is the media type of the signed content
* `cty` is the media type of the secured content (i.e. the payload)
* `kid` is the DID URL that can be resolved to the public key that verifies the credential's signature

The value of the `kid` parameter must match the value of the `id` parameter in the DID document published by the issuer and which contain the issuer's public key. `kid` must be included in the header to allow the token's audience to identify a specific key in the DID Document. This key must be able to verify the token's signature, ensuring the integrity of the data contained within the token.

#### Payload

```
{
  "iss": "https://example-credential-issuer.gov.uk",
  "sub": "did:key:ebfaeb1fd712ebf1c276e12ec21",
  "nbf": "1712664731",
  "iat": "1712664731",
  "exp": "1744221657",
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "<JSON-LD CONTEXT URI FOR ISSUER>"
  ],
  "type": [
    "VerifiableCredential",
    "FishingLicence"
  ],
  "issuer": "https://example-credential-issuer.gov.uk",
  "name": "Fishing licence",
  "description": "<OPTIONAL CREDENTIAL DESCRIPTION>",
  "validFrom": "2024-04-09T12:12:11Z",
  "validUntil": "2028-12-10T22:59:59Z",
  "credentialSubject": {
    "id": "did:key:ebfaeb1fd712ebf1c276e12ec21",
    "name": [
      {
        "nameParts": [
          {
            "value": "Sarah",
            "type": "GivenName"
          },
          {
            "value": "Edwards",
            "type": "FamilyName"
          }
        ]
      }
    ],
    "fishingLicenceRecord": [
      {
        "licenceNumber": "009878863",
        "issuanceDate": "2023-12-10",
        "expirationDate": "2028-12-10"
      }
    ]
  }
}
```

* `iss` (issuer). REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential.

* `sub` (subject). REQUIRED. The identifier of the holder of the information in the credential. The subject identifier is a decentralised identifier `did:key` generated by the wallet. In the credential issuance flow, the wallet shares its `did:key` with issuer and the issuer makes this the value of the credential's `sub` claim. This cryptographically binds the credential to the wallet.

* `nbf` (not before). REQUIRED. The time before which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `iat` (issued at). OPTIONAL. The time at which the JWT was issued. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `exp` (expiration time). OPTIONAL. The time after which the JWT must not be accepted for processing. Must be expressed in epoch time as per the [IETF RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519).

* `@context`. REQUIRED. The context of the data exchange. It must be a set of URIs that point to documents that describe the context. The first item in the set must be the URI `"https://www.w3.org/ns/credentials/v2"`.

* `type`. REQUIRED. A set of values indicating the type of verifiable credentials issued by the issuer. The first value in the set must be `VerifiableCredential`

* `issuer`. REQUIRED. The URL of the credential issuer service operated by the organisation sharing the credential. Must be the same as the value of the `iss` claim.

* `name`. OPTIONAL. Issuer-specified credential name.

* `description`. OPTIONAL. Issuer-specified credential description.

* `validFrom`. OPTIONAL. It represents the date and time the credential becomes valid, and the same as the value of the `nbf`/`iat` claims. Must be expressed in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

* `validUntil`. OPTIONAL. It represents the date and time the credential stops belong valid. This value specifies the date until which the information within the `credentialSubject` property remains valid. Hence, in the example above, the values of `expirationDate` and `validUntil` are the same. Must be expressed in ISO 8601 format as per the [VC data model v2.0](https://www.w3.org/TR/vc-data-model-2.0/).

* `credentialSubject`. REQUIRED. An object containing claims about the holder of the verifiable credential.

The physical Fishing Licence expires every five years and we assume the digital version of the Fishing Licence would follow the same approach to expiry. Therefore, the `validUntil` claim in the VC should be set to the `expirationDate` from the fishing licence record.

The `exp` claim is different from the `expirationDate` and `validUntil` claims. Because the VC contains an `expirationDate`, setting the `exp` claim is optional. If used, we recommend using the same or a short value.

When setting the expiration of the JWT, you should consider the expiration of the credential or entitlement it represents.

#### Signature

The credential must be signed with your credential issuer's private signing key using the ECDSA (Elliptic Curve Digital Signature Algorithm) cryptographic algorithm with P-256 (also known as Secp256r1) elliptic curve.

### Further guidance on credential binding

#### Binding credentials to users

Because each GOV.UK Wallet instance can be uniquely identified, your service can bind a credential with a specific wallet instance. The GOV.UK Wallet uses a specific type of [decentralised identifier (DID)](https://www.w3.org/TR/did-core/) called a `did:key` to cryptographically bind credentials to a user's wallet.

A [did:key](https://w3c-ccg.github.io/did-method-key/) is a DID method. The DID represents the public key of an asymmetric key pair generated when the GOV.UK Wallet is installed on a device. The private key never leaves the device, whereas the `did:key` is shared with credential issuers and verifiers, allowing credentials to be cryptographically bound to a specific GOV.UK Wallet instance.

The GOV.UK Wallet creates a `did:key` from a **P-256** (also known as Secp256r1) elliptic curve public key.

#### The `did:key` format

The `did:key` method is used to transfer public keys.

The format of a `did:key` is `did:key:multibaseValue`. The `multibaseValue` is the base58-btc multibase string representation of concatenating the multicodec identifier for the public key type and the compressed public key.

````
did-key-format := did:key:MULTIBASE(base58-btc, MULTICODEC(public-key-type, raw-public-key-bytes))
````

In Elliptic Curve Cryptography (ECC), the public key is a pair of `x` and `y` coordinates. A compressed public key is the `x` coordinate, which is 32 bytes in length, with a prefix, of 1 byte in length, that indicates whether the `y` coordinate is even or odd. The prefix is `02` if the `y` coordinate is even and `03` if it is odd. The resulting compressed public key is **33 bytes** in length:

````
Public key: 52972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab288742f4dc97d9edb6fd946babc002fdfb06f26caf117b9405ed79275763fdb1c

Public key (x coordinate): 52972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2
Public key (y coordinate): 88742f4dc97d9edb6fd946babc002fdfb06f26caf117b9405ed79275763fdb1c

// y coordinate is even so "02" is prepended to the x coordinate
Public key (compressed): 0252972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2
````

The `multibaseValue` is generated as follows:

1. Encode the compressed public key as bytes
1. Prefix the key bytes with the **curve multicodec value** encoded as **unsigned varint** (variable length integers)
- the multicodec hexadecimal value of a P-256 elliptic curve public key is `0x1200`, in varint-encoded bytes that is `[0x80, 0x24]`
1. Encode the above with **base58-btc** and then prefix it with `"z"` to indicate the base58-btc encoding - the result is the `multibaseValue`


The following is an example of a `did:key` derived from a base-58 encoded P-256 public key:

````
did:key:zDnaewZMz7MN6xSaAFADkDZJzMLbGSV25uKHAeXaxnPCwZomX
````

All DIDs derived from a P-256 public key always start with `"zDn"`.

#### Verifying a credential
To share a verifiable credential with a verifier, the wallet creates a **verifiable presentation** containing the verifiable credential, and signs it with its private key.

The verifier must be able to confirm that the system presenting the credential (i.e. the wallet) is also the intended holder of that credential. The verifier must confirm **proof of possession** of the verifiable credential. This is done by verifying that the entity which signed the verifiable presentation is the same as the subject of the verifiable credential. In other words, the `did:key` in the verifiable credential must be able to verify the signature on the verifiable presentation.
