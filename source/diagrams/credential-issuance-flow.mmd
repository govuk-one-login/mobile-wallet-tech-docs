sequenceDiagram
    autonumber
    actor User as User
    participant CRI as Credential Issuer
    participant App as App
    participant OneLogin as OneLogin
    activate User
    User->>CRI: Access
    activate CRI
    CRI->>OneLogin: Authenticates user: GET /authorize
    activate OneLogin
    OneLogin-->>CRI: Redirects user to your `redirect_uri` with `authorization_code`
    deactivate OneLogin
    CRI->>OneLogin: Exchanges `authorization_code` for tokens: POST /token
    activate OneLogin
    OneLogin-->>CRI: Returns token response (`access_token` & `id_token`)
    deactivate OneLogin
    CRI->>OneLogin: Exchanges `access_token` for user information: POST /userinfo
    activate OneLogin
    OneLogin-->>CRI: Returns user information
    deactivate OneLogin
    CRI->>CRI: Extracts wallet_subject_id from user information
    CRI->>CRI: Generates `credential_identifier` (UUID)
    CRI->>CRI: Stores `wallet_subject_id` against `credential_identifier`
    CRI->>CRI: Builds Pre-Authorized Code (JWT)
    note over CRI: Payload claims include `aud`, `iss`, `iat`, `exp`, `clientId` and `credential_identifiers`
    CRI->>CRI: Signs Pre-Authorized Code with CRI's private key
    CRI->>CRI: Builds Credential Offer object
    note over CRI: Object contains CRI's URL,<br> information about Credential(s) being offered<br> and Pre-Authorized Code
    CRI-->>User: Present Credential Offer as QR code
    deactivate CRI
    User->>App: Opens app
    activate App
    App-->OneLogin: Authenticates user
    activate OneLogin
    OneLogin-->>App: User is authenticated
    deactivate OneLogin
    User->>App: Scans QR code
    App->>App: Validates Credential Offer
    App->>App: Extracts CRI's URL from Credential Offer
    App->>CRI: Fetches CRI's Metadata: GET /.well-known/openid-credential-issuer
    activate CRI
    CRI-->>App: Returns CRI's Metadata
    deactivate CRI
    App->>App: Extracts Authorization Server's URL from Metadata
    App->>OneLogin: Exchanges Pre-Authorized Code for access token
    activate OneLogin
    OneLogin->>OneLogin: Uses `clientId` in  Pre-Authorized Code<br> to find CRI's JWKS URL
    OneLogin->>CRI: Fetches CRI's public key: `GET /.well-known/jwks.json`
    activate CRI
    CRI-->>OneLogin: Returns CRI's JSON Web Key Set
    deactivate CRI
    OneLogin->>OneLogin: Verifies Pre-Authorized Code signature
    OneLogin-->>App: Issues access token
    note left of OneLogin: walletSubjectId as sub claim<br>Issuer's ClientID as aud claim<br>credentialId as custom claim<br>generated uuid as c_nonce claim
    deactivate OneLogin
    App->>App: Generate and securely store an asymetric key pair
    App->>App: Sign c-nonce from access token with the private key
    note over App: include the public key in the JWT header in did:key format.
    App->>CRI: Fetch credential: `POST /credential`<br>(External CRI access token as Bearer Token,<br>and signed c-nonce JWT proof in body)
    activate CRI
    opt if OneLogin public key not in cache or invalid
        CRI->>OneLogin: Fetch public key from well-known endpoint
        activate OneLogin
        OneLogin-->>CRI: Return public key
        deactivate OneLogin
    end
    CRI->>CRI: Validate External CRI access token signature
    CRI->>CRI: Lookup credential based on credential_identifier claim
    CRI->>CRI: Validate sub claim on access token == walletAccountId
    CRI->>CRI: Validate proof of did:key ownership using `jwt` proof type
    CRI->>CRI: Build credential and bind to wallet did:key
    CRI-->>App: Credential
    deactivate CRI
    App->>CRI: Fetch public key: `GET /.well-known/did.json`
    activate CRI
    CRI-->>App: did:web with public key
    deactivate CRI
    App->>App: Verify signature and content of credential
    App->>App: Securely store credential
    activate CRI
    App-->>CRI: Notify of success or failure
    CRI-->>CRI: Record notification of success or failure
    CRI-->>App: respond
    deactivate CRI
    deactivate App
    deactivate User