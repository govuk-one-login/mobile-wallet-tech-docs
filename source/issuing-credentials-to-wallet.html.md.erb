---
title: Issuing credentials to GOV.UK Wallet
weight: 2
last_reviewed_on: 2025-05-14
review_in: 6 months
---

# Issuing credentials to GOV.UK Wallet

GOV.UK Wallet will support multiple credential formats to represent government documents. These documents can be: 

* [mdoc based credentials for the digital driving licence ](https://www.iso.org/obp/ui/en/#iso:std:iso-iec:18013:-5:ed-1:v1:en)
* other Verifiable Credentials (VCs), including [W3C Verifiable Credential Data Model 2.0](https://www.w3.org/TR/vc-data-model-2.0/) and later [other formats allowing selective disclosure of attributes](https://datatracker.ietf.org/doc/draft-ietf-oauth-sd-jwt-vc/)

GOV.UK Wallet follows the [OpenID Connect for Verifiable Credential Issuance (OIDC4VCI)](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html) open standard for its issuance flow.

Your team or department can start issuing credentials to GOV.UK Wallet by following this documentation.

## Understand GOV.UK Wallet’s credential exchange flow

This diagram shows the exchange of a credential between a government service and GOV.UK Wallet. Below the diagram is an explanation of each step in the process.

<div aria-hidden="true">
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
</script>

<html lang="en">
  <body>
    <pre class="mermaid">
  sequenceDiagram
    autonumber
    actor User as User
    participant CRI as Credential Issuer
    participant App as App
    participant OneLogin as GOV.UK One Login
    activate User
    User->>CRI: Accesses your service
    activate CRI
    CRI->>OneLogin: Authenticates user
    activate OneLogin
    OneLogin-->>CRI: Fetches user's walletSubjectID:<br>GET /userinfo
    deactivate OneLogin
    CRI->>CRI: Generates credential offer
    CRI-->>User: Renders credential offer<br> as QR code or deep-link
    deactivate CRI
    User->>App: Opens app
    activate App
    App-->OneLogin: Authenticates user
    activate OneLogin
    OneLogin-->>App: User is authenticated
    deactivate OneLogin
    User->>App: Redeems credential offer
    App->>CRI: Fetches CRI's metadata:<br> GET /.well-known/openid-credential-issuer
    activate CRI
    CRI-->>App: Returns metadata
    deactivate CRI
    App->>OneLogin: Exchanges pre-authorized code<br> for access token
    activate OneLogin
    OneLogin->>CRI: Fetches CRI's public keys:<br> GET /.well-known/jwks.json
    activate CRI
    CRI-->>OneLogin: Returns public keys as JWKS
    deactivate CRI
    OneLogin->>OneLogin: Verifies pre-authorized code<br> content and signature
    OneLogin-->>App: Issues access token
    deactivate OneLogin
    App->>App: Generates proof of possession
    App->>CRI: Fetches credential:<br> POST /credential
    activate CRI
        CRI->>OneLogin: Fetches GOV.UK One Login's public keys:<br> GET /.well-known/jwks.json
        activate OneLogin
        OneLogin-->>CRI: Returns JWKS
        deactivate OneLogin
    CRI->>CRI: Verifies access token and<br> proof of possession content and signature
    CRI->>CRI: Compares walletSubjectId values
    CRI->>CRI: Generates credential
    CRI->>App: Returns credential
    deactivate CRI
    App->>CRI: Fetches CRI's public key:<br> GET /.well-known/did.json
    activate CRI
    CRI-->>App: Returns public key as DID document
    deactivate CRI
    App->>App: Verifies credential<br> content and signature
    App->>App: Stores credential
    App->>CRI: Notifies of success or failure:<br>POST /notification
    activate CRI
    CRI->>CRI: Records notification
    CRI-->>App: Returns empty response
    deactivate CRI
    deactivate App
    deactivate User
    </pre>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
    </script>
  </body>
</html>
</div>

### [User authenticates with GOV.UK One Login to use your service](/credential-issuer-functionality/authenticating-users/#authenticating-users-with-one-login)

<ol>
  <li>Your user accesses your service.</li>

  <li>Your service authenticates the user with GOV.UK One Login.</li>

  <li>Your service fetches the user’s <code>walletSubjectId</code> from the GOV.UK One Login <a href="https://docs.sign-in.service.gov.uk/integrate-with-integration-environment/authenticate-your-user/#retrieve-user-information"><code>/userinfo</code> API</a>.</li>
</ol>

There is detailed guidance on [how GOV.UK One Login works](https://docs.sign-in.service.gov.uk/how-gov-uk-one-login-works/) in the GOV.UK One Login technical documentation.

### [Your service issues a credential offer](/credential-issuer-functionality/credential-offer/#credential-offer)

<ol start="4">
  <li>Your service generates a credential offer. Included in this offer is a <a href="/credential-issuer-functionality/credential-offer/#the-pre-authorised-code">pre-authorised code</a> signed by your service.</li>

  <li>Your service renders the credential offer to the user as a QR code or deep-link.</li>

  <li>The user opens the app.</li>

  <li>The app prompts the user to authenticate with GOV.UK One Login.</li>

  <li>The user who authenticated with your service in a web browser is authenticated with GOV.UK One Login in the app.</li>

  <li>The user scans the QR code or opens the deep link. This action passes the credential offer to GOV.UK Wallet.</li>
</ol>

### [Your service publishes metadata about the credentials it publishes](credential-issuer-functionality/metadata)

<ol start="10">
  <li>GOV.UK Wallet sends a GET request to your <code>/.well-known/openid-credential-issuer</code> endpoint to fetch your metadata.</li>

  <li>Your service returns its metadata.</li>

  <li>GOV.UK Wallet calls GOV.UK One Login to exchange the pre-authorised code in the credential offer for an access token.</li>

  <li>GOV.UK One Login sends a GET request to your <code>/.well-known/jwks.json</code> endpoint to fetch your public keys, which verify the signature on the pre-authorised code issued by your service.</li>

  <li>Your service returns its public keys as a <a href="credential-issuer-functionality/jwks">JSON Web Key Set (JWKS)</a>.</li>

  <li>GOV.UK One Login verifies the pre-authorised code content and its signature.</li>

  <li>GOV.UK One Login issues an access token that you can trust when GOV.UK Wallet calls your service to redeem it.</li>

  <li>GOV.UK Wallet generates a <a href="credential-issuer-functionality/credential/#request-body">proof of possession</a> for the key material.</li>

  <li>GOV.UK Wallet sends a POST request to your <code>/credential</code> endpoint to request the credential. This request includes the access token issued by GOV.UK One Login (as a bearer token in the authorization header) and the proof of possession generated by GOV.UK Wallet.</li>
</ol>

### [Your service issues a credential](/credential-issuer-functionality/credential/#credential)

<ol start="19">
  <li>Your service sends a GET request to the GOV.UK One Login <code>/.well-known/jwks.json</code> to fetch its public keys, which verify the signature on the access token issued by GOV.UK One Login.</li>

  <li>GOV.UK One Login returns its public keys as a JSON Web Key Set (JWKS).</li>

  <li>Your service verifies the content and signature of the access token and the proof of possession.</li>

  <li>Your service compares the <code>walletSubjectId</code> in the access token’s <code>sub</code> claim with the <code>walletSubjectId</code> retrieved in step 3. If they are the same, this provides assurance that you are issuing the credential to a digital wallet that is logged in as the rightful holder.</li>

  <li>Your service builds and signs the credential, and <a href="credential-issuer-functionality/credential/#further-guidance-on-credential-binding">binds it to the did:key provided in the proof of possession</a> to make sure the credential can only be used by the device it is issued to.</li>

  <li>Your service returns the device-bound credential to GOV.UK Wallet.</li>

  <li>GOV.UK Wallet sends a GET request to your <code>/.well-known/did.json</code> endpoint to fetch your <a href="credential-issuer-functionality/did">DID document</a>. The DID document contains your public key which is required to verify the signature on the credential issued by your service.</li>

  <li>Your service returns its DID document.</li>

  <li>GOV.UK Wallet verifies the content and signature of the credential.</li>

  <li>GOV.UK Wallet stores the credential.</li>
</ol>

### [GOV.UK Wallet notifies your service](/credential-issuer-functionality/notification/)

The following steps are optional. If you do not offer a `/notification` endpoint then GOV.UK Wallet will not send a notification.

<ol start="29">
  <li>GOV.UK Wallet sends a POST request to your <code>/notification</code> endpoint to notify your service. This notification will confirm whether GOV.UK Wallet successfully stored the credential, or failed to store it.</li>

  <li>Your service records the notification.</li>

  <li>Your service returns an empty response to GOV.UK Wallet.</li>
</ol>