openapi: "3.0.0"
info:
  version: 1.0.0
  title: Wallet Credential Issuer API
  description: This specification describes the 6 credential issuer endpoints required to issue credentials to the GOV.UK Wallet.
  license:
    name: MIT License
paths:
  /credential_offer:
    get:
      description: An endpoint for issuing a credential offer.
      responses:
        '200':
          description: |- 
            Credential offer URL consisting of the following parts:<br>
            1. Walletâ€™s credential offer endpoint.<br>
            2. A query parameter `credential_offer`.<br>
            3. URL-encoded credential offer.
          content:
            application/json:
              schema:
                type: string
              example:
                https://mobile.account.gov.uk/wallet/add?credential_offer=%7B%22credential_configuration_ids%22%3A%5B%22FishingLicence%22%5D%2C%22grants%22%3A%7B%22urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Apre-authorized_code%22%3A%7B%22pre-authorized_code%22%3A%22eyJraWQiOiI1ZGNiZWU4NjNiNWQ3Y2MzMGM5YmExZjczOTNkYWNjNmMxNjYxMDc4MmU0YjZhMTkxZjk0YTdlOGIxZTE1MTBmIiwidHlwIjoiSldUIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJodHRwczovL3Rva2VuLmFjY291bnQuZ292LnVrIiwiY2xpZW50SWQiOiJURVNUX0NMSUVOVF9JRCIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS1jcmVkZW50aWFsLWlzc3Vlci5nb3YudWsiLCJjcmVkZW50aWFsX2lkZW50aWZpZXJzIjpbIjE2NTAwNWYwLTI4YjktNGFhMS05NTM4LTNmZThlZTc0N2Q0YiJdLCJleHAiOjE3Mzk0NTc3ODAsImlhdCI6MTczOTQ1NzQ4MH0.ImEbm6m4IoxW9UD-sPNi4ez26F7qiv5t-g7RFzEtbPegp5jNqulYvlPmRKj-QNBIifgXtrYID9-dHNWOQTybjQ%22%7D%7D%2C%22credential_issuer%22%3A%22https%3A%2F%2Fexample-credential-issuer.gov.uk%22%7D
  /credential:
    post:
      description: An endpoint used by the GOV.UK Wallet to request a Credential from the Credential Issuer.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequestBody'
            example:
              proof:
                proof_type: jwt
                jwt: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDprZXk6ekRuYWVTR2ZTUU1Zdm5MYkxXRXViaGhHRFBvcTdwQTlNTU52dW12YnNtTUNab3ZVUiJ9.eyJpc3MiOiJ1cm46ZmRjOmdvdjp1azp3YWxsZXQiLCJhdWQiOiJodHRwczovL2V4YW1wbGUtY3JlZGVudGlhbC1pc3N1ZXIuZ292LnVrIiwiaWF0IjoxNzM5NDU3NTE3MzU1LCJub25jZSI6ImRiMmRiMzEzLTVjYjktNGJiNC1hYTRkLTlmZTRkYWM0MGJlMSJ9.V_EDG7NNVOLixqScs6CKU99uEL0Rt47GoYW9Kp3UZPoP6COcXKDusvNwZMSdWTb44LoK5QvTMGbrB71y-4lRow
      responses:
        '200':
          description: Credential.
          headers:
            Cache-Control:
              schema:
                type: string
                example: "no-store"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialResponse"
              example:
                credentials:
                  - credential: eyJraWQiOiJkaWQ6d2ViOmV4YW1wbGUtY3JlZGVudGlhbC1pc3N1ZXIuZ292LnVrIzVkY2JlZTg2M2I1ZDdjYzMwYzliYTFmNzM5M2RhY2M2YzE2NjEwNzgyZTRiNmExOTFmOTRhN2U4YjFlMTUxMGYiLCJjdHkiOiJ2YyIsInR5cCI6InZjK2p3dCIsImFsZyI6IkVTMjU2In0.eyJpc3MiOiJodHRwczovL2V4YW1wbGUtY3JlZGVudGlhbC1pc3N1ZXIuZ292LnVrIiwic3ViIjoiZGlkOmtleTp6RG5hZVNHZlNRTVl2bkxiTFdFdWJoaEdEUG9xN3BBOU1NTnZ1bXZic21NQ1pvdlVSIiwiaWF0IjoiMTcxMjY2NDczMSIsIm5iZiI6IjE3MTI2NjQ3MzEiLCJleHAiOiIxNzQ0MjIxNjU3IiwiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnL25zL2NyZWRlbnRpYWxzL3YyIiwiPEpTT04tTEQgQ09OVEVYVCBVUkkgRk9SIElTU1VFUj4iXSwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIkZpc2hpbmdMaWNlbmNlIl0sImlzc3VlciI6Imh0dHBzOi8vZXhhbXBsZS1jcmVkZW50aWFsLWlzc3Vlci5nb3YudWsiLCJuYW1lIjoiRmlzaGluZyBsaWNlbmNlIiwiZGVzY3JpcHRpb24iOiI8T1BUSU9OQUwgQ1JFREVOVElBTCBERVNDUklQVElPTj4iLCJ2YWxpZEZyb20iOiIyMDI0LTA0LTA5VDEyOjEyOjExWiIsInZhbGlkVW50aWwiOiIyMDI4LTEyLTEwVDIyOjU5OjU5WiIsImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImlkIjoiZGlkOmtleTp6RG5hZVNHZlNRTVl2bkxiTFdFdWJoaEdEUG9xN3BBOU1NTnZ1bXZic21NQ1pvdlVSIiwibmFtZSI6W3sibmFtZVBhcnRzIjpbeyJ2YWx1ZSI6IlNhcmFoIiwidHlwZSI6IkdpdmVuTmFtZSJ9LHsidmFsdWUiOiJFZHdhcmRzIiwidHlwZSI6IkZhbWlseU5hbWUifV19XSwiZmlzaGluZ0xpY2VuY2UiOlt7ImxpY2VuY2VOdW1iZXIiOiIwMDk4Nzg4NjMiLCJpc3N1YW5jZURhdGUiOiIyMDIzLTEyLTEwIiwiZXhwaXJhdGlvbkRhdGUiOiIyMDI4LTEyLTEwIn1dfX0.UXGyl9ihcMNn-RlqBe_8rTxvtPDqdaGLKMJs3pk9QL4zgEZbF4LZmeZt-k2p04MSlW8IX8uWKgtxFDOGu9j2rQ
                notification_id: 776aefd4-26c6-4a5f-aa7c-b5e294cd87cd
        '400':
          description: Bad Request
          headers:
            Cache-Control:
              schema:
                type: string
                example: "no-store"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential400ErrorResponse"
              example:
                error: invalid_proof
        '401':
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: Indicates the authentication scheme that should be used to access the resource.
              schema:
                type: string
                example: Bearer error="invalid_token"
            Cache-Control:
              schema:
                type: string
                example: "no-store"
  /notification:
    post:
      description: An endpoint used by GOV.UK Wallet to notify the credential issuer of events concerning issued credentials.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequestBody'
            example:
              notification_id: 776aefd4-26c6-4a5f-aa7c-b5e294cd87cd
              event: credential_accepted
              event_description: Credential has been successfully stored
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          headers:
            Cache-Control:
              schema:
                type: string
                example: "no-store"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification400ErrorResponse"
              example:
                error: invalid_notification_id
        '401':
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: Indicates the authentication scheme that should be used to access the resource.
              schema:
                $ref: "#/components/schemas/Notification401ErrorResponse"
              example:
                error: invalid_token
                error_description: "The access token expired"
  /issue:
    post:
      description: An endpoint used by credential issuers to request a new credential be issued.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequestBody'
            example:
                jwt: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDprZXk6ekRuYWVTR2ZTUU1Zdm5MYkxXRXViaGhHRFBvcTdwQTlNTU52dW12YnNtTUNab3ZVUiJ9.eyJpc3MiOiJ1cm46ZmRjOmdvdjp1azp3YWxsZXQiLCJhdWQiOiJodHRwczovL2V4YW1wbGUtY3JlZGVudGlhbC1pc3N1ZXIuZ292LnVrIiwiaWF0IjoxNzM5NDU3NTE3MzU1LCJub25jZSI6ImRiMmRiMzEzLTVjYjktNGJiNC1hYTRkLTlmZTRkYWM0MGJlMSJ9.V_EDG7NNVOLixqScs6CKU99uEL0Rt47GoYW9Kp3UZPoP6COcXKDusvNwZMSdWTb44LoK5QvTMGbrB71y-4lRow
      responses:
        '200':
          description: A response that contains a index and uri to where the credential is stored.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueResponse"
              example:
                index: 3
                uri: "https://api.status-list.service.gov.uk/b/A671FED3E9AD"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue400ErrorResponse"
              example:
                error: BAD_REQUEST
                error_description: "No Issuer in Payload"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue401ErrorResponse"
              example:
                error: UNAUTHORISED
                error_description: "No matching client found with ID: "
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue500ErrorResponse"
              example:
                error: INTERNAL_SERVER_ERROR
                error_description: "No jwksUri found on client ID: "
  /revoke:
    post:
      description: An endpoint used by credential issuers to revoke an existing credential that they previously issued.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeCredentialRequest'
            example:
              proof:
                proof_type: jwt
                jwt: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjFmYjJjMGYwN2Y2NDNiNDVjYWZlYjUzZmI5ZDllYjM0In0.eyJpc3MiOiJhc0tXbnNqZUVKRVdqandTSHNJa3NJa3NJaEJlIiwiaWR4IjozLCJ1cmkiOiJodHRwczovL2FwaS5zdGF0dXMtbGlzdC5zZXJ2aWNlLmdvdi51ay90LzNCMEYzQkQwODdBNyJ9.BYHtcw-ao-wB9FK-vOkRIr2c683sWS46Y3gpJ489GAS35zLs7AkPEq6Br-KrWbhzTUOZcjB4QO7aP6t0WRqzvw
      responses:
        '202':
          description: "HTTP/1.1 202 Accepted"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revoke400ErrorResponse"
              example:
                error: BAD_REQUEST
                error_description: "No Issuer in Payload"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revoke401ErrorResponse"
              example:
                error: UNAUTHORISED
                error_description: "No matching client found with ID: "
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revoke500ErrorResponse"
              example:
                error: INTERNAL_SERVER_ERROR
                error_description: "No jwksUri found on client ID: "

  /statuslist/{endpoint}:
    get:
      description: Returns a specific status list
      parameters:
        - in: path
          name: endpoint
          schema:
            type: string
            example: "A671FED3E9AD"
          required: true
          description: "The specific endpoint to return"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusListResponse'

  /.well-known/openid-credential-issuer:
    get:
      description: A public endpoint for the GOV.UK Wallet to retrieve metadata about the credential issuer.
      responses:
        '200':
          description: Credential issuer's metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
              example:
                credential_issuer: https://example-credential-issuer.gov.uk
                authorization_servers:
                    - https://token.account.gov.uk
                credential_endpoint: https://example-credential-issuer.gov.uk/credential
                notification_endpoint: https://example-credential-issuer.gov.uk/notification
                credential_configurations_supported:
                  FishingLicenceCredential:
                    format: jwt_vc_json
                    credential_definition:
                      type:
                        - VerifiableCredential
                        - FishingLicenceCredential
                    cryptographic_binding_methods_supported:
                      - did
                    credential_signing_alg_values_supported:
                      - ES256
                    proof_types_supported:
                      jwt:
                        proof_signing_alg_values_supported:
                          - ES256
  /.well-known/did.json:
    get:
      description: A public endpoint for GOV.UK Wallet and credential verifiers to retrieve the credential issuer's public keys for verifying credentials
      responses:
        '200':
          description: Credential issuer's DID document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DidResponse"
              example:
                "@context":
                  - https://www.w3.org/ns/did/v1
                  - https://w3id.org/security/suites/jws-2020/v1
                id: did:web:example-credential-issuer.gov.uk
                verificationMethod:
                  - id: did:web:example-credential-issuer.gov.uk#5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f
                    type: JsonWebKey2020
                    controller: did:web:example-credential-issuer.gov.uk
                    publicKeyJwk:
                      kty: EC
                      kid: 5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f
                      crv: P-256
                      x: 6jCKX_QRrmTeEJi-uiwcYqu8BgMgl70g2pdAst24MPE
                      y: icPzjbSk6apD_SNvQt8NWOPlPeGG4KYU55GfnARryoY
                      alg: ES256
                assertionMethod:
                  - did:web:example-credential-issuer.gov.uk#5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f
  /.well-known/jwks.json:
    get:
      description: A public endpoint for GOV.UK One Login to retrieve the credential issuer's JSON Web Key Set (JWKS) of public keys which can be used to verify the the pre-authorised code.
      responses:
        '200':
          description: Credential issuer's JWKS.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwksResponse"
              example:
                keys:
                  - kty: EC
                    use: sig
                    crv: P-256
                    kid: 5dcbee863b5d7cc30c9ba1f7393dacc6c16610782e4b6a191f94a7e8b1e1510f
                    x: 6jCKX_QRrmTeEJi-uiwcYqu8BgMgl70g2pdAst24MPE=
                    y: icPzjbSk6apD_SNvQt8NWOPlPeGG4KYU55GfnARryoY=
                    alg: ES256
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CredentialRequestBody:
      type: object
      properties:
        proof:
          $ref: "#/components/schemas/Proof"
      required:
        - proof
    Proof:
      type: object
      additionalProperties: false
      properties:
        proof_type:
          type: string
          enum: [ jwt ]
        jwt:
          type: string
          format: jwt
      required:
        - jwt
        - proof_type
    CredentialResponse:
      type: object
      properties:
        credentials:
          description: An array containing one issued credential.
          type: array
          items:
            $ref: "#/components/schemas/Credential"
        notification_id:
          description: Issuance flow notification ID.
          type: string
          format: uuid
      required:
        - credential
    Credential:
      type: object
      properties:
        credential:
          description: The issued credential.
          type: string
          format: jwt
      required:
        - credential
    Credential400ErrorResponse:
      type: object
      properties:
        error:
          description: An error code, such as `invalid_proof` or `invalid_nonce`.
          type: string
    NotificationRequestBody:
      type: object
      properties:
        notification_id:
          type: string
          format: uuid
        event:
          type: string
          enum:
            - credential_accepted
            - credential_failure
            - credential_deleted
        event_description:
          description: A human-readable explanation of the event.
          type: string
      required:
        - notification_id
        - event
    Notification400ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be `invalid_notification_request`, `invalid_notification_id`, or `invalid_request`.
          type: string
          enum:
            - invalid_notification_request
            - invalid_notification_id
            - invalid_request
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    Notification401ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be `invalid_token`.
          type: string
          enum:
            - invalid_token
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    IssueRequestBody:
      properties:
        issue:
          description: The request to issue a credential.
          type: string
          format: jwt
      required:
        - issueStatusListEntryRequest
    IssueStatusListEntryRequest:
      type: object
      properties:
        credential:
          description: The jwt that contains the information needed to issue a credential.
          type: string
          format: jwt
    IssueResponse:
      type: object
      properties:
        uri:
          description: The uri to the status list in which the credential is stored.
          type: string
        index:
          description: The index at which the specific credential status value is stored.
          type: number
      required:
        - uri
        - index
    Issue400ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be 'BAD_REQUEST'.
          type: string
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    Issue401ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be 'UNAUTHORISED'.
          type: string
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    Issue500ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be 'INTERNAL_SERVER_ERROR'.
          type: string
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    Revoke400ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be 'BAD_REQUEST'.
          type: string
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    Revoke401ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be 'UNAUTHORISED'.
          type: string
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    Revoke500ErrorResponse:
      type: object
      properties:
        error:
          description: An error code - must be 'INTERNAL_SERVER_ERROR'.
          type: string
        error_description:
          description: A human-readable explanation of the error.
          type: string
      required:
        - error
    RevokeCredentialRequest:
      type: object
      properties:
        jwt:
          type: string
          example: "_u-_SUiaJX_AGymGQTyO1FNe9PcnuWgD7SYMIiuxysX8gmVjESFPtaVgeyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImt-pZCI6IjFmYjJjMGYwN2Y2NDNiNDVjYWZlYjUzZmI5ZDllYjM0In0eyJpc3MiOiJhc0tXbnNqZUVKRVdqandTSHNJa3NJa3NJaEJlIiwiZXhwaXJlcyI6IjE3MzQ3MDk0OTMifQNXOgtDaErMGh1McajjH9Jo2K5b18R"
      xml:
        name: issuerequest
    StatusListResponse:
      type: object
      properties:
        jwt:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjVjNjhjNjZjNWRkZTMwMzhjMmNiNzM5MGY4YTk5MzYyIn0eyJleHAiOjIyOTE3MjAxNzAsImlhdCI6MTY4NjkyMDE3MCwiaXNzIjoiaHR0cHM6Ly9hcGkuc3RhdHVzLWxpc3Quc2VydmljZS5nb3YudWsiLCJzdGF0dXNfbGlzdCI6eyJiaXRzIjoyLCJsc3QiOiJlTnB6ZEFFQUFNZ0FoZyJ9LCJzdWIiOiJodHRwczovL2FwaS5zdGF0dXMtbGlzdC5zZXJ2aWNlLmdvdi51ay9iLzNCMEYzQkQwODdBNyIsInR0bCI6NDMyMDB9iq3Hen7iVSNijEzrSNVmqupLxitYS-okhrCrTf_j9ZpUhz4CKIogaNKCN8HHzj3Ewus0Np307hjdzTXnT0u_6w"
      xml:
        name: issuerequest
    StatusListResponse:
      type: object
      properties:
        jwt:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjVjNjhjNjZjNWRkZTMwMzhjMmNiNzM5MGY4YTk5MzYyIn0eyJleHAiOjIyOTE3MjAxNzAsImlhdCI6MTY4NjkyMDE3MCwiaXNzIjoiaHR0cHM6Ly9hcGkuc3RhdHVzLWxpc3Quc2VydmljZS5nb3YudWsiLCJzdGF0dXNfbGlzdCI6eyJiaXRzIjoyLCJsc3QiOiJlTnB6ZEFFQUFNZ0FoZyJ9LCJzdWIiOiJodHRwczovL2FwaS5zdGF0dXMtbGlzdC5zZXJ2aWNlLmdvdi51ay9iLzNCMEYzQkQwODdBNyIsInR0bCI6NDMyMDB9iq3Hen7iVSNijEzrSNVmqupLxitYS-okhrCrTf_j9ZpUhz4CKIogaNKCN8HHzj3Ewus0Np307hjdzTXnT0u_6w"
      xml:
        name: issuerequest
    MetadataResponse:
      type: object
      properties:
        credential_issuer:
          description: URL of the credential issuer.
          type: string
          format: uri
        credential_endpoint:
          description: URL of the credential issuer's credential endpoint.
          type: string
          format: uri
        notification_endpoint:
          description: URL of the credential issuer's notification endpoint.
          type: string
          format: uri
        authorization_servers:
          description: Set containing the URL of the authorization server(s) the credential issuer relies on for authorization.
          type: array
          items:
            type: string
            format: uri
        credential_configurations_supported:
          $ref: '#/components/schemas/CredentialConfigurationsSupported'
      required:
        - authorization_servers
        - credential_configurations_supported
        - credential_endpoint
        - credential_issuer
    CredentialConfigurationsSupported:
      description: Information about the credential(s) issued by the credential issuer.
      type: object
      properties:
        fishingLicence:
          $ref: '#/components/schemas/FishingLicence'
      required:
        - fishingLicence
    FishingLicence:
      description: A credential issued by the credential issuer.
      type: object
      properties:
        format:
          description: Format of the credential.
          type: string
        credential_definition:
          $ref: '#/components/schemas/CredentialDefinition'
        cryptographic_binding_methods_supported:
          description: Set of methods available for cryptographically binding the issued credential.
          type: array
          items:
            type: string
        credential_signing_alg_values_supported:
          description: Set of algorithms that the credential issuer uses to sign the credential.
          type: array
          items:
            type: string
        proof_types_supported:
          $ref: '#/components/schemas/ProofTypesSupported'
      required:
        - credential_definition
        - credential_signing_alg_values_supported
        - cryptographic_binding_methods_supported
        - format
        - proof_types_supported
    CredentialDefinition:
      description: Description of the credential type.
      type: object
      properties:
        type:
          type: array
          items:
            type: string
      required:
        - type
    ProofTypesSupported:
      description: Key proof(s) supported by the credential issuer.
      type: object
      properties:
        jwt:
          $ref: '#/components/schemas/Jwt'
      required:
        - jwt
    Jwt:
      type: object
      properties:
        proof_signing_alg_values_supported:
          type: array
          items:
            type: string
      required:
        - proof_signing_alg_values_supported
    KeyAttestationsRequired:
      type: object
    DidResponse:
      type: object
      properties:
        '@context':
          description: An array of URL contexts which define the terms used in the DID document.
          type: array
          minItems: 1
          items:
            type: string
            format: uri
        id:
          description: The unique identifier of the DID document.
          type: string
        verificationMethod:
          description: An array of verification methods (cryptographic public keys).
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/VerificationMethod"
        assertionMethod:
          description: Array of DID URLs where each URL uniquely identifies a verification method within the DID document.
          type: array
          minItems: 1
          items:
            type: string
      required:
        - '@context'
        - id
        - verificationMethod
        - assertionMethod
    VerificationMethod:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        controller:
          type: string
        publicKeyJwk:
          $ref: "#/components/schemas/PublicKeyJwk"
      required:
        - id
        - type
        - controller
        - publicKeyJwk
    PublicKeyJwk:
      type: object
      properties:
        kty:
          description: Key Type. The family of cryptographic algorithms used with the key.
          type: string
          enum:
            - EC
        kid:
          description: Key ID. Unique identifier to match a specific key.
          type: string
        crv:
          description: Curve. Cryptographic curve used with the key.
          type: string
          enum:
            - P-256
        x:
          description: The "x" coordinate for the elliptic curve point.
          type: string
        y:
          description: The "y" coordinate for the elliptic curve point.
          type: string
        alg:
          description: Algorithm. The cryptographic algorithm used with the key.
          type: string
          enum:
            - P-256
      required:
        - kty
        - kid
        - crv
        - x
        - y
        - alg
    JwksResponse:
      type: object
      properties:
        keys:
          description: A set of public keys, each in JSON Web Key (JWK) format.
          type: array
          items:
            $ref: '#/components/schemas/Key'
      required:
        - keys
    Key:
      type: object
      properties:
        kty:
          description: Key Type. The family of cryptographic algorithms used with the key.
          type: string
          enum:
            - EC
        kid:
          description: Key ID. Unique identifier to match a specific key.
          type: string
        crv:
          description: Curve. Cryptographic curve used with the key.
          type: string
          enum:
            - P-256
        x:
          description: The "x" coordinate for the elliptic curve point.
          type: string
        y:
          description: The "y" coordinate for the elliptic curve point.
          type: string
        alg:
          description: Algorithm. The cryptographic algorithm used with the key.
          type: string
          enum:
            - P-256
        use:
          description: The intended use of the key.
          type: string
          enum:
            - sig
      required:
        - kty
        - kid
        - crv
        - x
        - y
        - alg
        - use